# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ['VpcArgs', 'Vpc']

@pulumi.input_type
class VpcArgs:
    def __init__(__self__, *,
                 amazon_side_asn: Optional[pulumi.Input[str]] = None,
                 azs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 create_database_internet_gateway_route: Optional[pulumi.Input[bool]] = None,
                 create_database_nat_gateway_route: Optional[pulumi.Input[bool]] = None,
                 create_database_subnet_group: Optional[pulumi.Input[bool]] = None,
                 create_database_subnet_route_table: Optional[pulumi.Input[bool]] = None,
                 create_egress_only_igw: Optional[pulumi.Input[bool]] = None,
                 create_elasticache_subnet_group: Optional[pulumi.Input[bool]] = None,
                 create_elasticache_subnet_route_table: Optional[pulumi.Input[bool]] = None,
                 create_flow_log_cloudwatch_iam_role: Optional[pulumi.Input[bool]] = None,
                 create_flow_log_cloudwatch_log_group: Optional[pulumi.Input[bool]] = None,
                 create_igw: Optional[pulumi.Input[bool]] = None,
                 create_multiple_intra_route_tables: Optional[pulumi.Input[bool]] = None,
                 create_multiple_public_route_tables: Optional[pulumi.Input[bool]] = None,
                 create_private_nat_gateway_route: Optional[pulumi.Input[bool]] = None,
                 create_redshift_subnet_group: Optional[pulumi.Input[bool]] = None,
                 create_redshift_subnet_route_table: Optional[pulumi.Input[bool]] = None,
                 create_vpc: Optional[pulumi.Input[bool]] = None,
                 customer_gateway_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 customer_gateways: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 customer_owned_ipv4_pool: Optional[pulumi.Input[str]] = None,
                 database_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 database_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 database_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 database_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 database_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 database_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 database_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 database_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 database_subnet_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 database_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 database_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 database_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 database_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 database_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_network_acl_egress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_network_acl_ingress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_network_acl_name: Optional[pulumi.Input[str]] = None,
                 default_network_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 default_route_table_name: Optional[pulumi.Input[str]] = None,
                 default_route_table_propagating_vgws: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_route_table_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 default_security_group_egress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_security_group_ingress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_security_group_name: Optional[pulumi.Input[str]] = None,
                 default_security_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 default_vpc_enable_dns_hostnames: Optional[pulumi.Input[bool]] = None,
                 default_vpc_enable_dns_support: Optional[pulumi.Input[bool]] = None,
                 default_vpc_name: Optional[pulumi.Input[str]] = None,
                 default_vpc_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dhcp_options_domain_name: Optional[pulumi.Input[str]] = None,
                 dhcp_options_domain_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_options_ipv6_address_preferred_lease_time: Optional[pulumi.Input[float]] = None,
                 dhcp_options_netbios_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_options_netbios_node_type: Optional[pulumi.Input[str]] = None,
                 dhcp_options_ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_options_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 elasticache_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 elasticache_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 elasticache_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 elasticache_subnet_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticache_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticache_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 elasticache_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 elasticache_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_dhcp_options: Optional[pulumi.Input[bool]] = None,
                 enable_dns_hostnames: Optional[pulumi.Input[bool]] = None,
                 enable_dns_support: Optional[pulumi.Input[bool]] = None,
                 enable_flow_log: Optional[pulumi.Input[bool]] = None,
                 enable_ipv6: Optional[pulumi.Input[bool]] = None,
                 enable_nat_gateway: Optional[pulumi.Input[bool]] = None,
                 enable_network_address_usage_metrics: Optional[pulumi.Input[bool]] = None,
                 enable_public_redshift: Optional[pulumi.Input[bool]] = None,
                 enable_vpn_gateway: Optional[pulumi.Input[bool]] = None,
                 external_nat_ip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_nat_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 flow_log_cloudwatch_iam_role_arn: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_iam_role_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['FlowLogCloudwatchIamRoleConditionsArgs']]]] = None,
                 flow_log_cloudwatch_log_group_class: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_kms_key_id: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_name_prefix: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_name_suffix: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_retention_in_days: Optional[pulumi.Input[float]] = None,
                 flow_log_cloudwatch_log_group_skip_destroy: Optional[pulumi.Input[bool]] = None,
                 flow_log_deliver_cross_account_role: Optional[pulumi.Input[str]] = None,
                 flow_log_destination_arn: Optional[pulumi.Input[str]] = None,
                 flow_log_destination_type: Optional[pulumi.Input[str]] = None,
                 flow_log_file_format: Optional[pulumi.Input[str]] = None,
                 flow_log_hive_compatible_partitions: Optional[pulumi.Input[bool]] = None,
                 flow_log_log_format: Optional[pulumi.Input[str]] = None,
                 flow_log_max_aggregation_interval: Optional[pulumi.Input[float]] = None,
                 flow_log_per_hour_partition: Optional[pulumi.Input[bool]] = None,
                 flow_log_traffic_type: Optional[pulumi.Input[str]] = None,
                 igw_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 instance_tenancy: Optional[pulumi.Input[str]] = None,
                 intra_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 intra_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 intra_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 intra_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 intra_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 intra_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 intra_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 intra_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 intra_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 intra_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 intra_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv4_ipam_pool_id: Optional[pulumi.Input[str]] = None,
                 ipv4_netmask_length: Optional[pulumi.Input[float]] = None,
                 ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 ipv6_cidr_block_network_border_group: Optional[pulumi.Input[str]] = None,
                 ipv6_ipam_pool_id: Optional[pulumi.Input[str]] = None,
                 ipv6_netmask_length: Optional[pulumi.Input[float]] = None,
                 manage_default_network_acl: Optional[pulumi.Input[bool]] = None,
                 manage_default_route_table: Optional[pulumi.Input[bool]] = None,
                 manage_default_security_group: Optional[pulumi.Input[bool]] = None,
                 manage_default_vpc: Optional[pulumi.Input[bool]] = None,
                 map_customer_owned_ip_on_launch: Optional[pulumi.Input[bool]] = None,
                 map_public_ip_on_launch: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_eip_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 nat_gateway_destination_cidr_block: Optional[pulumi.Input[str]] = None,
                 nat_gateway_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 one_nat_gateway_per_az: Optional[pulumi.Input[bool]] = None,
                 outpost_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 outpost_arn: Optional[pulumi.Input[str]] = None,
                 outpost_az: Optional[pulumi.Input[str]] = None,
                 outpost_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 outpost_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 outpost_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 outpost_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outpost_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outpost_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 outpost_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 outpost_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 outpost_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 private_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 private_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 private_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 private_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 private_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 private_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 private_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 private_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 private_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 private_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 private_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 private_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 private_subnet_tags_per_az: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 private_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 propagate_intra_route_tables_vgw: Optional[pulumi.Input[bool]] = None,
                 propagate_private_route_tables_vgw: Optional[pulumi.Input[bool]] = None,
                 propagate_public_route_tables_vgw: Optional[pulumi.Input[bool]] = None,
                 public_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 public_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 public_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 public_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 public_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 public_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 public_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 public_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 public_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 public_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 public_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 public_subnet_tags_per_az: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 putin_khuylo: Optional[pulumi.Input[bool]] = None,
                 redshift_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 redshift_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 redshift_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 redshift_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 redshift_subnet_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redshift_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redshift_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 redshift_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 redshift_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reuse_nat_ips: Optional[pulumi.Input[bool]] = None,
                 secondary_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 single_nat_gateway: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 use_ipam_pool: Optional[pulumi.Input[bool]] = None,
                 vpc_flow_log_iam_policy_name: Optional[pulumi.Input[str]] = None,
                 vpc_flow_log_iam_policy_use_name_prefix: Optional[pulumi.Input[bool]] = None,
                 vpc_flow_log_iam_role_name: Optional[pulumi.Input[str]] = None,
                 vpc_flow_log_iam_role_use_name_prefix: Optional[pulumi.Input[bool]] = None,
                 vpc_flow_log_permissions_boundary: Optional[pulumi.Input[str]] = None,
                 vpc_flow_log_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpn_gateway_az: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_id: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Vpc resource.
        :param pulumi.Input[str] amazon_side_asn: The Autonomous System Number (ASN) for the Amazon side of the gateway. By default the virtual private gateway is created with the current default Amazon ASN
        :param pulumi.Input[Sequence[pulumi.Input[str]]] azs: A list of availability zones names or ids in the region
        :param pulumi.Input[str] cidr: (Optional) The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4_netmask_length` & `ipv4_ipam_pool_id`
        :param pulumi.Input[bool] create_database_internet_gateway_route: Controls if an internet gateway route for public database access should be created
        :param pulumi.Input[bool] create_database_nat_gateway_route: Controls if a nat gateway route should be created to give internet access to the database subnets
        :param pulumi.Input[bool] create_database_subnet_group: Controls if database subnet group should be created (n.b. database_subnets must also be set)
        :param pulumi.Input[bool] create_database_subnet_route_table: Controls if separate route table for database should be created
        :param pulumi.Input[bool] create_egress_only_igw: Controls if an Egress Only Internet Gateway is created and its related routes
        :param pulumi.Input[bool] create_elasticache_subnet_group: Controls if elasticache subnet group should be created
        :param pulumi.Input[bool] create_elasticache_subnet_route_table: Controls if separate route table for elasticache should be created
        :param pulumi.Input[bool] create_flow_log_cloudwatch_iam_role: Whether to create IAM role for VPC Flow Logs
        :param pulumi.Input[bool] create_flow_log_cloudwatch_log_group: Whether to create CloudWatch log group for VPC Flow Logs
        :param pulumi.Input[bool] create_igw: Controls if an Internet Gateway is created for public subnets and the related routes that connect them
        :param pulumi.Input[bool] create_multiple_intra_route_tables: Indicates whether to create a separate route table for each intra subnet. Default: `false`
        :param pulumi.Input[bool] create_multiple_public_route_tables: Indicates whether to create a separate route table for each public subnet. Default: `false`
        :param pulumi.Input[bool] create_private_nat_gateway_route: Controls if a nat gateway route should be created to give internet access to the private subnets
        :param pulumi.Input[bool] create_redshift_subnet_group: Controls if redshift subnet group should be created
        :param pulumi.Input[bool] create_redshift_subnet_route_table: Controls if separate route table for redshift should be created
        :param pulumi.Input[bool] create_vpc: Controls if VPC should be created (it affects almost all resources)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] customer_gateway_tags: Additional tags for the Customer Gateway
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] customer_gateways: Maps of Customer Gateway's attributes (BGP ASN and Gateway's Internet-routable external IP address)
        :param pulumi.Input[str] customer_owned_ipv4_pool: The customer owned IPv4 address pool. Typically used with the `map_customer_owned_ip_on_launch` argument. The `outpost_arn` argument must be specified when configured
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_acl_tags: Additional tags for the database subnets network ACL
        :param pulumi.Input[bool] database_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for database subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] database_inbound_acl_rules: Database subnets inbound network ACL rules
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] database_outbound_acl_rules: Database subnets outbound network ACL rules
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_route_table_tags: Additional tags for the database route tables
        :param pulumi.Input[bool] database_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] database_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] database_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] database_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[str] database_subnet_group_name: Name of database subnet group
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_subnet_group_tags: Additional tags for the database subnet group
        :param pulumi.Input[bool] database_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] database_subnet_ipv6_prefixes: Assigns IPv6 database subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] database_subnet_names: Explicit values to use in the Name tag on database subnets. If empty, Name tags are generated
        :param pulumi.Input[str] database_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] database_subnet_suffix: Suffix to append to database subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_subnet_tags: Additional tags for the database subnets
        :param pulumi.Input[Sequence[pulumi.Input[str]]] database_subnets: A list of database subnets inside the VPC
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] default_network_acl_egress: List of maps of egress rules to set on the Default Network ACL
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] default_network_acl_ingress: List of maps of ingress rules to set on the Default Network ACL
        :param pulumi.Input[str] default_network_acl_name: Name to be used on the Default Network ACL
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] default_network_acl_tags: Additional tags for the Default Network ACL
        :param pulumi.Input[str] default_route_table_name: Name to be used on the default route table
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_route_table_propagating_vgws: List of virtual gateways for propagation
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] default_route_table_routes: Configuration block of routes. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_route_table#route
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] default_route_table_tags: Additional tags for the default route table
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] default_security_group_egress: List of maps of egress rules to set on the default security group
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] default_security_group_ingress: List of maps of ingress rules to set on the default security group
        :param pulumi.Input[str] default_security_group_name: Name to be used on the default security group
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] default_security_group_tags: Additional tags for the default security group
        :param pulumi.Input[bool] default_vpc_enable_dns_hostnames: Should be true to enable DNS hostnames in the Default VPC
        :param pulumi.Input[bool] default_vpc_enable_dns_support: Should be true to enable DNS support in the Default VPC
        :param pulumi.Input[str] default_vpc_name: Name to be used on the Default VPC
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] default_vpc_tags: Additional tags for the Default VPC
        :param pulumi.Input[str] dhcp_options_domain_name: Specifies DNS name for DHCP options set (requires enable_dhcp_options set to true)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dhcp_options_domain_name_servers: Specify a list of DNS server addresses for DHCP options set, default to AWS provided (requires enable_dhcp_options set to true)
        :param pulumi.Input[float] dhcp_options_ipv6_address_preferred_lease_time: How frequently, in seconds, a running instance with an IPv6 assigned to it goes through DHCPv6 lease renewal (requires enable_dhcp_options set to true)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dhcp_options_netbios_name_servers: Specify a list of netbios servers for DHCP options set (requires enable_dhcp_options set to true)
        :param pulumi.Input[str] dhcp_options_netbios_node_type: Specify netbios node_type for DHCP options set (requires enable_dhcp_options set to true)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dhcp_options_ntp_servers: Specify a list of NTP servers for DHCP options set (requires enable_dhcp_options set to true)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] dhcp_options_tags: Additional tags for the DHCP option set (requires enable_dhcp_options set to true)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] elasticache_acl_tags: Additional tags for the elasticache subnets network ACL
        :param pulumi.Input[bool] elasticache_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for elasticache subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] elasticache_inbound_acl_rules: Elasticache subnets inbound network ACL rules
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] elasticache_outbound_acl_rules: Elasticache subnets outbound network ACL rules
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] elasticache_route_table_tags: Additional tags for the elasticache route tables
        :param pulumi.Input[bool] elasticache_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] elasticache_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] elasticache_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[str] elasticache_subnet_group_name: Name of elasticache subnet group
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] elasticache_subnet_group_tags: Additional tags for the elasticache subnet group
        :param pulumi.Input[bool] elasticache_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticache_subnet_ipv6_prefixes: Assigns IPv6 elasticache subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticache_subnet_names: Explicit values to use in the Name tag on elasticache subnets. If empty, Name tags are generated
        :param pulumi.Input[str] elasticache_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] elasticache_subnet_suffix: Suffix to append to elasticache subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] elasticache_subnet_tags: Additional tags for the elasticache subnets
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticache_subnets: A list of elasticache subnets inside the VPC
        :param pulumi.Input[bool] enable_dhcp_options: Should be true if you want to specify a DHCP options set with a custom domain name, DNS servers, NTP servers, netbios servers, and/or netbios server type
        :param pulumi.Input[bool] enable_dns_hostnames: Should be true to enable DNS hostnames in the VPC
        :param pulumi.Input[bool] enable_dns_support: Should be true to enable DNS support in the VPC
        :param pulumi.Input[bool] enable_flow_log: Whether or not to enable VPC Flow Logs
        :param pulumi.Input[bool] enable_ipv6: Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block
        :param pulumi.Input[bool] enable_nat_gateway: Should be true if you want to provision NAT Gateways for each of your private networks
        :param pulumi.Input[bool] enable_network_address_usage_metrics: Determines whether network address usage metrics are enabled for the VPC
        :param pulumi.Input[bool] enable_public_redshift: Controls if redshift should have public routing table
        :param pulumi.Input[bool] enable_vpn_gateway: Should be true if you want to create a new VPN Gateway resource and attach it to the VPC
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_nat_ip_ids: List of EIP IDs to be assigned to the NAT Gateways (used in combination with reuse_nat_ips)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_nat_ips: List of EIPs to be used for `nat_public_ips` output (used in combination with reuse_nat_ips and external_nat_ip_ids)
        :param pulumi.Input[str] flow_log_cloudwatch_iam_role_arn: The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group. When flow_log_destination_arn is set to ARN of Cloudwatch Logs, this argument needs to be provided
        :param pulumi.Input[Sequence[pulumi.Input['FlowLogCloudwatchIamRoleConditionsArgs']]] flow_log_cloudwatch_iam_role_conditions: Additional conditions of the CloudWatch role assumption policy
        :param pulumi.Input[str] flow_log_cloudwatch_log_group_class: Specified the log class of the log group. Possible values are: STANDARD or INFREQUENT_ACCESS
        :param pulumi.Input[str] flow_log_cloudwatch_log_group_kms_key_id: The ARN of the KMS Key to use when encrypting log data for VPC flow logs
        :param pulumi.Input[str] flow_log_cloudwatch_log_group_name_prefix: Specifies the name prefix of CloudWatch Log Group for VPC flow logs
        :param pulumi.Input[str] flow_log_cloudwatch_log_group_name_suffix: Specifies the name suffix of CloudWatch Log Group for VPC flow logs
        :param pulumi.Input[float] flow_log_cloudwatch_log_group_retention_in_days: Specifies the number of days you want to retain log events in the specified log group for VPC flow logs
        :param pulumi.Input[bool] flow_log_cloudwatch_log_group_skip_destroy:  Set to true if you do not wish the log group (and any logs it may contain) to be deleted at destroy time, and instead just remove the log group from the Terraform state
        :param pulumi.Input[str] flow_log_deliver_cross_account_role: (Optional) ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
        :param pulumi.Input[str] flow_log_destination_arn: The ARN of the CloudWatch log group or S3 bucket where VPC Flow Logs will be pushed. If this ARN is a S3 bucket the appropriate permissions need to be set on that bucket's policy. When create_flow_log_cloudwatch_log_group is set to false this argument must be provided
        :param pulumi.Input[str] flow_log_destination_type: Type of flow log destination. Can be s3, kinesis-data-firehose or cloud-watch-logs
        :param pulumi.Input[str] flow_log_file_format: (Optional) The format for the flow log. Valid values: `plain-text`, `parquet`
        :param pulumi.Input[bool] flow_log_hive_compatible_partitions: (Optional) Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3
        :param pulumi.Input[str] flow_log_log_format: The fields to include in the flow log record, in the order in which they should appear
        :param pulumi.Input[float] flow_log_max_aggregation_interval: The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. Valid Values: `60` seconds or `600` seconds
        :param pulumi.Input[bool] flow_log_per_hour_partition: (Optional) Indicates whether to partition the flow log per hour. This reduces the cost and response time for queries
        :param pulumi.Input[str] flow_log_traffic_type: The type of traffic to capture. Valid values: ACCEPT, REJECT, ALL
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] igw_tags: Additional tags for the internet gateway
        :param pulumi.Input[str] instance_tenancy: A tenancy option for instances launched into the VPC
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] intra_acl_tags: Additional tags for the intra subnets network ACL
        :param pulumi.Input[bool] intra_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for intra subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] intra_inbound_acl_rules: Intra subnets inbound network ACLs
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] intra_outbound_acl_rules: Intra subnets outbound network ACLs
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] intra_route_table_tags: Additional tags for the intra route tables
        :param pulumi.Input[bool] intra_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] intra_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] intra_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] intra_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[bool] intra_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] intra_subnet_ipv6_prefixes: Assigns IPv6 intra subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] intra_subnet_names: Explicit values to use in the Name tag on intra subnets. If empty, Name tags are generated
        :param pulumi.Input[str] intra_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] intra_subnet_suffix: Suffix to append to intra subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] intra_subnet_tags: Additional tags for the intra subnets
        :param pulumi.Input[Sequence[pulumi.Input[str]]] intra_subnets: A list of intra subnets inside the VPC
        :param pulumi.Input[str] ipv4_ipam_pool_id: (Optional) The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR
        :param pulumi.Input[float] ipv4_netmask_length: (Optional) The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id
        :param pulumi.Input[str] ipv6_cidr: (Optional) IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6_netmask_length`
        :param pulumi.Input[str] ipv6_cidr_block_network_border_group: By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones
        :param pulumi.Input[str] ipv6_ipam_pool_id: (Optional) IPAM Pool ID for a IPv6 pool. Conflicts with `assign_generated_ipv6_cidr_block`
        :param pulumi.Input[float] ipv6_netmask_length: (Optional) Netmask length to request from IPAM Pool. Conflicts with `ipv6_cidr_block`. This can be omitted if IPAM pool as a `allocation_default_netmask_length` set. Valid values: `56`
        :param pulumi.Input[bool] manage_default_network_acl: Should be true to adopt and manage Default Network ACL
        :param pulumi.Input[bool] manage_default_route_table: Should be true to manage default route table
        :param pulumi.Input[bool] manage_default_security_group: Should be true to adopt and manage default security group
        :param pulumi.Input[bool] manage_default_vpc: Should be true to adopt and manage Default VPC
        :param pulumi.Input[bool] map_customer_owned_ip_on_launch: Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The `customer_owned_ipv4_pool` and `outpost_arn` arguments must be specified when set to `true`. Default is `false`
        :param pulumi.Input[bool] map_public_ip_on_launch: Specify true to indicate that instances launched into the subnet should be assigned a public IP address. Default is `false`
        :param pulumi.Input[str] name: Name to be used on all the resources as identifier
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] nat_eip_tags: Additional tags for the NAT EIP
        :param pulumi.Input[str] nat_gateway_destination_cidr_block: Used to pass a custom destination route for private NAT Gateway. If not specified, the default 0.0.0.0/0 is used as a destination route
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] nat_gateway_tags: Additional tags for the NAT gateways
        :param pulumi.Input[bool] one_nat_gateway_per_az: Should be true if you want only one NAT Gateway per availability zone. Requires `var.azs` to be set, and the number of `public_subnets` created to be greater than or equal to the number of availability zones specified in `var.azs`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] outpost_acl_tags: Additional tags for the outpost subnets network ACL
        :param pulumi.Input[str] outpost_arn: ARN of Outpost you want to create a subnet in
        :param pulumi.Input[str] outpost_az: AZ where Outpost is anchored
        :param pulumi.Input[bool] outpost_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for outpost subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] outpost_inbound_acl_rules: Outpost subnets inbound network ACLs
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] outpost_outbound_acl_rules: Outpost subnets outbound network ACLs
        :param pulumi.Input[bool] outpost_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] outpost_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] outpost_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[bool] outpost_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outpost_subnet_ipv6_prefixes: Assigns IPv6 outpost subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outpost_subnet_names: Explicit values to use in the Name tag on outpost subnets. If empty, Name tags are generated
        :param pulumi.Input[str] outpost_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] outpost_subnet_suffix: Suffix to append to outpost subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] outpost_subnet_tags: Additional tags for the outpost subnets
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outpost_subnets: A list of outpost subnets inside the VPC
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] private_acl_tags: Additional tags for the private subnets network ACL
        :param pulumi.Input[bool] private_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for private subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] private_inbound_acl_rules: Private subnets inbound network ACLs
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] private_outbound_acl_rules: Private subnets outbound network ACLs
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] private_route_table_tags: Additional tags for the private route tables
        :param pulumi.Input[bool] private_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] private_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] private_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] private_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[bool] private_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_subnet_ipv6_prefixes: Assigns IPv6 private subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_subnet_names: Explicit values to use in the Name tag on private subnets. If empty, Name tags are generated
        :param pulumi.Input[str] private_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] private_subnet_suffix: Suffix to append to private subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] private_subnet_tags: Additional tags for the private subnets
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] private_subnet_tags_per_az: Additional tags for the private subnets where the primary key is the AZ
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_subnets: A list of private subnets inside the VPC
        :param pulumi.Input[bool] propagate_intra_route_tables_vgw: Should be true if you want route table propagation
        :param pulumi.Input[bool] propagate_private_route_tables_vgw: Should be true if you want route table propagation
        :param pulumi.Input[bool] propagate_public_route_tables_vgw: Should be true if you want route table propagation
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] public_acl_tags: Additional tags for the public subnets network ACL
        :param pulumi.Input[bool] public_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for public subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] public_inbound_acl_rules: Public subnets inbound network ACLs
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] public_outbound_acl_rules: Public subnets outbound network ACLs
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] public_route_table_tags: Additional tags for the public route tables
        :param pulumi.Input[bool] public_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] public_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] public_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] public_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[bool] public_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_subnet_ipv6_prefixes: Assigns IPv6 public subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_subnet_names: Explicit values to use in the Name tag on public subnets. If empty, Name tags are generated
        :param pulumi.Input[str] public_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] public_subnet_suffix: Suffix to append to public subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] public_subnet_tags: Additional tags for the public subnets
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] public_subnet_tags_per_az: Additional tags for the public subnets where the primary key is the AZ
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_subnets: A list of public subnets inside the VPC
        :param pulumi.Input[bool] putin_khuylo: Do you agree that Putin doesn't respect Ukrainian sovereignty and territorial integrity? More info: https://en.wikipedia.org/wiki/Putin_khuylo!
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] redshift_acl_tags: Additional tags for the redshift subnets network ACL
        :param pulumi.Input[bool] redshift_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for redshift subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] redshift_inbound_acl_rules: Redshift subnets inbound network ACL rules
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] redshift_outbound_acl_rules: Redshift subnets outbound network ACL rules
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] redshift_route_table_tags: Additional tags for the redshift route tables
        :param pulumi.Input[bool] redshift_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] redshift_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] redshift_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[str] redshift_subnet_group_name: Name of redshift subnet group
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] redshift_subnet_group_tags: Additional tags for the redshift subnet group
        :param pulumi.Input[bool] redshift_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redshift_subnet_ipv6_prefixes: Assigns IPv6 redshift subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redshift_subnet_names: Explicit values to use in the Name tag on redshift subnets. If empty, Name tags are generated
        :param pulumi.Input[str] redshift_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] redshift_subnet_suffix: Suffix to append to redshift subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] redshift_subnet_tags: Additional tags for the redshift subnets
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redshift_subnets: A list of redshift subnets inside the VPC
        :param pulumi.Input[bool] reuse_nat_ips: Should be true if you don't want EIPs to be created for your NAT Gateways and will instead pass them in via the 'external_nat_ip_ids' variable
        :param pulumi.Input[Sequence[pulumi.Input[str]]] secondary_cidr_blocks: List of secondary CIDR blocks to associate with the VPC to extend the IP Address pool
        :param pulumi.Input[bool] single_nat_gateway: Should be true if you want to provision a single shared NAT Gateway across all of your private networks
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to add to all resources
        :param pulumi.Input[bool] use_ipam_pool: Determines whether IPAM pool is used for CIDR allocation
        :param pulumi.Input[str] vpc_flow_log_iam_policy_name: Name of the IAM policy
        :param pulumi.Input[bool] vpc_flow_log_iam_policy_use_name_prefix: Determines whether the name of the IAM policy (`vpc_flow_log_iam_policy_name`) is used as a prefix
        :param pulumi.Input[str] vpc_flow_log_iam_role_name: Name to use on the VPC Flow Log IAM role created
        :param pulumi.Input[bool] vpc_flow_log_iam_role_use_name_prefix: Determines whether the IAM role name (`vpc_flow_log_iam_role_name_name`) is used as a prefix
        :param pulumi.Input[str] vpc_flow_log_permissions_boundary: The ARN of the Permissions Boundary for the VPC Flow Log IAM Role
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vpc_flow_log_tags: Additional tags for the VPC Flow Logs
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vpc_tags: Additional tags for the VPC
        :param pulumi.Input[str] vpn_gateway_az: The Availability Zone for the VPN Gateway
        :param pulumi.Input[str] vpn_gateway_id: ID of VPN Gateway to attach to the VPC
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vpn_gateway_tags: Additional tags for the VPN gateway
        """
        if amazon_side_asn is not None:
            pulumi.set(__self__, "amazon_side_asn", amazon_side_asn)
        if azs is not None:
            pulumi.set(__self__, "azs", azs)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if create_database_internet_gateway_route is not None:
            pulumi.set(__self__, "create_database_internet_gateway_route", create_database_internet_gateway_route)
        if create_database_nat_gateway_route is not None:
            pulumi.set(__self__, "create_database_nat_gateway_route", create_database_nat_gateway_route)
        if create_database_subnet_group is not None:
            pulumi.set(__self__, "create_database_subnet_group", create_database_subnet_group)
        if create_database_subnet_route_table is not None:
            pulumi.set(__self__, "create_database_subnet_route_table", create_database_subnet_route_table)
        if create_egress_only_igw is not None:
            pulumi.set(__self__, "create_egress_only_igw", create_egress_only_igw)
        if create_elasticache_subnet_group is not None:
            pulumi.set(__self__, "create_elasticache_subnet_group", create_elasticache_subnet_group)
        if create_elasticache_subnet_route_table is not None:
            pulumi.set(__self__, "create_elasticache_subnet_route_table", create_elasticache_subnet_route_table)
        if create_flow_log_cloudwatch_iam_role is not None:
            pulumi.set(__self__, "create_flow_log_cloudwatch_iam_role", create_flow_log_cloudwatch_iam_role)
        if create_flow_log_cloudwatch_log_group is not None:
            pulumi.set(__self__, "create_flow_log_cloudwatch_log_group", create_flow_log_cloudwatch_log_group)
        if create_igw is not None:
            pulumi.set(__self__, "create_igw", create_igw)
        if create_multiple_intra_route_tables is not None:
            pulumi.set(__self__, "create_multiple_intra_route_tables", create_multiple_intra_route_tables)
        if create_multiple_public_route_tables is not None:
            pulumi.set(__self__, "create_multiple_public_route_tables", create_multiple_public_route_tables)
        if create_private_nat_gateway_route is not None:
            pulumi.set(__self__, "create_private_nat_gateway_route", create_private_nat_gateway_route)
        if create_redshift_subnet_group is not None:
            pulumi.set(__self__, "create_redshift_subnet_group", create_redshift_subnet_group)
        if create_redshift_subnet_route_table is not None:
            pulumi.set(__self__, "create_redshift_subnet_route_table", create_redshift_subnet_route_table)
        if create_vpc is not None:
            pulumi.set(__self__, "create_vpc", create_vpc)
        if customer_gateway_tags is not None:
            pulumi.set(__self__, "customer_gateway_tags", customer_gateway_tags)
        if customer_gateways is not None:
            pulumi.set(__self__, "customer_gateways", customer_gateways)
        if customer_owned_ipv4_pool is not None:
            pulumi.set(__self__, "customer_owned_ipv4_pool", customer_owned_ipv4_pool)
        if database_acl_tags is not None:
            pulumi.set(__self__, "database_acl_tags", database_acl_tags)
        if database_dedicated_network_acl is not None:
            pulumi.set(__self__, "database_dedicated_network_acl", database_dedicated_network_acl)
        if database_inbound_acl_rules is not None:
            pulumi.set(__self__, "database_inbound_acl_rules", database_inbound_acl_rules)
        if database_outbound_acl_rules is not None:
            pulumi.set(__self__, "database_outbound_acl_rules", database_outbound_acl_rules)
        if database_route_table_tags is not None:
            pulumi.set(__self__, "database_route_table_tags", database_route_table_tags)
        if database_subnet_assign_ipv6_address_on_creation is not None:
            pulumi.set(__self__, "database_subnet_assign_ipv6_address_on_creation", database_subnet_assign_ipv6_address_on_creation)
        if database_subnet_enable_dns64 is not None:
            pulumi.set(__self__, "database_subnet_enable_dns64", database_subnet_enable_dns64)
        if database_subnet_enable_resource_name_dns_a_record_on_launch is not None:
            pulumi.set(__self__, "database_subnet_enable_resource_name_dns_a_record_on_launch", database_subnet_enable_resource_name_dns_a_record_on_launch)
        if database_subnet_enable_resource_name_dns_aaaa_record_on_launch is not None:
            pulumi.set(__self__, "database_subnet_enable_resource_name_dns_aaaa_record_on_launch", database_subnet_enable_resource_name_dns_aaaa_record_on_launch)
        if database_subnet_group_name is not None:
            pulumi.set(__self__, "database_subnet_group_name", database_subnet_group_name)
        if database_subnet_group_tags is not None:
            pulumi.set(__self__, "database_subnet_group_tags", database_subnet_group_tags)
        if database_subnet_ipv6_native is not None:
            pulumi.set(__self__, "database_subnet_ipv6_native", database_subnet_ipv6_native)
        if database_subnet_ipv6_prefixes is not None:
            pulumi.set(__self__, "database_subnet_ipv6_prefixes", database_subnet_ipv6_prefixes)
        if database_subnet_names is not None:
            pulumi.set(__self__, "database_subnet_names", database_subnet_names)
        if database_subnet_private_dns_hostname_type_on_launch is not None:
            pulumi.set(__self__, "database_subnet_private_dns_hostname_type_on_launch", database_subnet_private_dns_hostname_type_on_launch)
        if database_subnet_suffix is not None:
            pulumi.set(__self__, "database_subnet_suffix", database_subnet_suffix)
        if database_subnet_tags is not None:
            pulumi.set(__self__, "database_subnet_tags", database_subnet_tags)
        if database_subnets is not None:
            pulumi.set(__self__, "database_subnets", database_subnets)
        if default_network_acl_egress is not None:
            pulumi.set(__self__, "default_network_acl_egress", default_network_acl_egress)
        if default_network_acl_ingress is not None:
            pulumi.set(__self__, "default_network_acl_ingress", default_network_acl_ingress)
        if default_network_acl_name is not None:
            pulumi.set(__self__, "default_network_acl_name", default_network_acl_name)
        if default_network_acl_tags is not None:
            pulumi.set(__self__, "default_network_acl_tags", default_network_acl_tags)
        if default_route_table_name is not None:
            pulumi.set(__self__, "default_route_table_name", default_route_table_name)
        if default_route_table_propagating_vgws is not None:
            pulumi.set(__self__, "default_route_table_propagating_vgws", default_route_table_propagating_vgws)
        if default_route_table_routes is not None:
            pulumi.set(__self__, "default_route_table_routes", default_route_table_routes)
        if default_route_table_tags is not None:
            pulumi.set(__self__, "default_route_table_tags", default_route_table_tags)
        if default_security_group_egress is not None:
            pulumi.set(__self__, "default_security_group_egress", default_security_group_egress)
        if default_security_group_ingress is not None:
            pulumi.set(__self__, "default_security_group_ingress", default_security_group_ingress)
        if default_security_group_name is not None:
            pulumi.set(__self__, "default_security_group_name", default_security_group_name)
        if default_security_group_tags is not None:
            pulumi.set(__self__, "default_security_group_tags", default_security_group_tags)
        if default_vpc_enable_dns_hostnames is not None:
            pulumi.set(__self__, "default_vpc_enable_dns_hostnames", default_vpc_enable_dns_hostnames)
        if default_vpc_enable_dns_support is not None:
            pulumi.set(__self__, "default_vpc_enable_dns_support", default_vpc_enable_dns_support)
        if default_vpc_name is not None:
            pulumi.set(__self__, "default_vpc_name", default_vpc_name)
        if default_vpc_tags is not None:
            pulumi.set(__self__, "default_vpc_tags", default_vpc_tags)
        if dhcp_options_domain_name is not None:
            pulumi.set(__self__, "dhcp_options_domain_name", dhcp_options_domain_name)
        if dhcp_options_domain_name_servers is not None:
            pulumi.set(__self__, "dhcp_options_domain_name_servers", dhcp_options_domain_name_servers)
        if dhcp_options_ipv6_address_preferred_lease_time is not None:
            pulumi.set(__self__, "dhcp_options_ipv6_address_preferred_lease_time", dhcp_options_ipv6_address_preferred_lease_time)
        if dhcp_options_netbios_name_servers is not None:
            pulumi.set(__self__, "dhcp_options_netbios_name_servers", dhcp_options_netbios_name_servers)
        if dhcp_options_netbios_node_type is not None:
            pulumi.set(__self__, "dhcp_options_netbios_node_type", dhcp_options_netbios_node_type)
        if dhcp_options_ntp_servers is not None:
            pulumi.set(__self__, "dhcp_options_ntp_servers", dhcp_options_ntp_servers)
        if dhcp_options_tags is not None:
            pulumi.set(__self__, "dhcp_options_tags", dhcp_options_tags)
        if elasticache_acl_tags is not None:
            pulumi.set(__self__, "elasticache_acl_tags", elasticache_acl_tags)
        if elasticache_dedicated_network_acl is not None:
            pulumi.set(__self__, "elasticache_dedicated_network_acl", elasticache_dedicated_network_acl)
        if elasticache_inbound_acl_rules is not None:
            pulumi.set(__self__, "elasticache_inbound_acl_rules", elasticache_inbound_acl_rules)
        if elasticache_outbound_acl_rules is not None:
            pulumi.set(__self__, "elasticache_outbound_acl_rules", elasticache_outbound_acl_rules)
        if elasticache_route_table_tags is not None:
            pulumi.set(__self__, "elasticache_route_table_tags", elasticache_route_table_tags)
        if elasticache_subnet_assign_ipv6_address_on_creation is not None:
            pulumi.set(__self__, "elasticache_subnet_assign_ipv6_address_on_creation", elasticache_subnet_assign_ipv6_address_on_creation)
        if elasticache_subnet_enable_dns64 is not None:
            pulumi.set(__self__, "elasticache_subnet_enable_dns64", elasticache_subnet_enable_dns64)
        if elasticache_subnet_enable_resource_name_dns_a_record_on_launch is not None:
            pulumi.set(__self__, "elasticache_subnet_enable_resource_name_dns_a_record_on_launch", elasticache_subnet_enable_resource_name_dns_a_record_on_launch)
        if elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch is not None:
            pulumi.set(__self__, "elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch", elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch)
        if elasticache_subnet_group_name is not None:
            pulumi.set(__self__, "elasticache_subnet_group_name", elasticache_subnet_group_name)
        if elasticache_subnet_group_tags is not None:
            pulumi.set(__self__, "elasticache_subnet_group_tags", elasticache_subnet_group_tags)
        if elasticache_subnet_ipv6_native is not None:
            pulumi.set(__self__, "elasticache_subnet_ipv6_native", elasticache_subnet_ipv6_native)
        if elasticache_subnet_ipv6_prefixes is not None:
            pulumi.set(__self__, "elasticache_subnet_ipv6_prefixes", elasticache_subnet_ipv6_prefixes)
        if elasticache_subnet_names is not None:
            pulumi.set(__self__, "elasticache_subnet_names", elasticache_subnet_names)
        if elasticache_subnet_private_dns_hostname_type_on_launch is not None:
            pulumi.set(__self__, "elasticache_subnet_private_dns_hostname_type_on_launch", elasticache_subnet_private_dns_hostname_type_on_launch)
        if elasticache_subnet_suffix is not None:
            pulumi.set(__self__, "elasticache_subnet_suffix", elasticache_subnet_suffix)
        if elasticache_subnet_tags is not None:
            pulumi.set(__self__, "elasticache_subnet_tags", elasticache_subnet_tags)
        if elasticache_subnets is not None:
            pulumi.set(__self__, "elasticache_subnets", elasticache_subnets)
        if enable_dhcp_options is not None:
            pulumi.set(__self__, "enable_dhcp_options", enable_dhcp_options)
        if enable_dns_hostnames is not None:
            pulumi.set(__self__, "enable_dns_hostnames", enable_dns_hostnames)
        if enable_dns_support is not None:
            pulumi.set(__self__, "enable_dns_support", enable_dns_support)
        if enable_flow_log is not None:
            pulumi.set(__self__, "enable_flow_log", enable_flow_log)
        if enable_ipv6 is not None:
            pulumi.set(__self__, "enable_ipv6", enable_ipv6)
        if enable_nat_gateway is not None:
            pulumi.set(__self__, "enable_nat_gateway", enable_nat_gateway)
        if enable_network_address_usage_metrics is not None:
            pulumi.set(__self__, "enable_network_address_usage_metrics", enable_network_address_usage_metrics)
        if enable_public_redshift is not None:
            pulumi.set(__self__, "enable_public_redshift", enable_public_redshift)
        if enable_vpn_gateway is not None:
            pulumi.set(__self__, "enable_vpn_gateway", enable_vpn_gateway)
        if external_nat_ip_ids is not None:
            pulumi.set(__self__, "external_nat_ip_ids", external_nat_ip_ids)
        if external_nat_ips is not None:
            pulumi.set(__self__, "external_nat_ips", external_nat_ips)
        if flow_log_cloudwatch_iam_role_arn is not None:
            pulumi.set(__self__, "flow_log_cloudwatch_iam_role_arn", flow_log_cloudwatch_iam_role_arn)
        if flow_log_cloudwatch_iam_role_conditions is not None:
            pulumi.set(__self__, "flow_log_cloudwatch_iam_role_conditions", flow_log_cloudwatch_iam_role_conditions)
        if flow_log_cloudwatch_log_group_class is not None:
            pulumi.set(__self__, "flow_log_cloudwatch_log_group_class", flow_log_cloudwatch_log_group_class)
        if flow_log_cloudwatch_log_group_kms_key_id is not None:
            pulumi.set(__self__, "flow_log_cloudwatch_log_group_kms_key_id", flow_log_cloudwatch_log_group_kms_key_id)
        if flow_log_cloudwatch_log_group_name_prefix is not None:
            pulumi.set(__self__, "flow_log_cloudwatch_log_group_name_prefix", flow_log_cloudwatch_log_group_name_prefix)
        if flow_log_cloudwatch_log_group_name_suffix is not None:
            pulumi.set(__self__, "flow_log_cloudwatch_log_group_name_suffix", flow_log_cloudwatch_log_group_name_suffix)
        if flow_log_cloudwatch_log_group_retention_in_days is not None:
            pulumi.set(__self__, "flow_log_cloudwatch_log_group_retention_in_days", flow_log_cloudwatch_log_group_retention_in_days)
        if flow_log_cloudwatch_log_group_skip_destroy is not None:
            pulumi.set(__self__, "flow_log_cloudwatch_log_group_skip_destroy", flow_log_cloudwatch_log_group_skip_destroy)
        if flow_log_deliver_cross_account_role is not None:
            pulumi.set(__self__, "flow_log_deliver_cross_account_role", flow_log_deliver_cross_account_role)
        if flow_log_destination_arn is not None:
            pulumi.set(__self__, "flow_log_destination_arn", flow_log_destination_arn)
        if flow_log_destination_type is not None:
            pulumi.set(__self__, "flow_log_destination_type", flow_log_destination_type)
        if flow_log_file_format is not None:
            pulumi.set(__self__, "flow_log_file_format", flow_log_file_format)
        if flow_log_hive_compatible_partitions is not None:
            pulumi.set(__self__, "flow_log_hive_compatible_partitions", flow_log_hive_compatible_partitions)
        if flow_log_log_format is not None:
            pulumi.set(__self__, "flow_log_log_format", flow_log_log_format)
        if flow_log_max_aggregation_interval is not None:
            pulumi.set(__self__, "flow_log_max_aggregation_interval", flow_log_max_aggregation_interval)
        if flow_log_per_hour_partition is not None:
            pulumi.set(__self__, "flow_log_per_hour_partition", flow_log_per_hour_partition)
        if flow_log_traffic_type is not None:
            pulumi.set(__self__, "flow_log_traffic_type", flow_log_traffic_type)
        if igw_tags is not None:
            pulumi.set(__self__, "igw_tags", igw_tags)
        if instance_tenancy is not None:
            pulumi.set(__self__, "instance_tenancy", instance_tenancy)
        if intra_acl_tags is not None:
            pulumi.set(__self__, "intra_acl_tags", intra_acl_tags)
        if intra_dedicated_network_acl is not None:
            pulumi.set(__self__, "intra_dedicated_network_acl", intra_dedicated_network_acl)
        if intra_inbound_acl_rules is not None:
            pulumi.set(__self__, "intra_inbound_acl_rules", intra_inbound_acl_rules)
        if intra_outbound_acl_rules is not None:
            pulumi.set(__self__, "intra_outbound_acl_rules", intra_outbound_acl_rules)
        if intra_route_table_tags is not None:
            pulumi.set(__self__, "intra_route_table_tags", intra_route_table_tags)
        if intra_subnet_assign_ipv6_address_on_creation is not None:
            pulumi.set(__self__, "intra_subnet_assign_ipv6_address_on_creation", intra_subnet_assign_ipv6_address_on_creation)
        if intra_subnet_enable_dns64 is not None:
            pulumi.set(__self__, "intra_subnet_enable_dns64", intra_subnet_enable_dns64)
        if intra_subnet_enable_resource_name_dns_a_record_on_launch is not None:
            pulumi.set(__self__, "intra_subnet_enable_resource_name_dns_a_record_on_launch", intra_subnet_enable_resource_name_dns_a_record_on_launch)
        if intra_subnet_enable_resource_name_dns_aaaa_record_on_launch is not None:
            pulumi.set(__self__, "intra_subnet_enable_resource_name_dns_aaaa_record_on_launch", intra_subnet_enable_resource_name_dns_aaaa_record_on_launch)
        if intra_subnet_ipv6_native is not None:
            pulumi.set(__self__, "intra_subnet_ipv6_native", intra_subnet_ipv6_native)
        if intra_subnet_ipv6_prefixes is not None:
            pulumi.set(__self__, "intra_subnet_ipv6_prefixes", intra_subnet_ipv6_prefixes)
        if intra_subnet_names is not None:
            pulumi.set(__self__, "intra_subnet_names", intra_subnet_names)
        if intra_subnet_private_dns_hostname_type_on_launch is not None:
            pulumi.set(__self__, "intra_subnet_private_dns_hostname_type_on_launch", intra_subnet_private_dns_hostname_type_on_launch)
        if intra_subnet_suffix is not None:
            pulumi.set(__self__, "intra_subnet_suffix", intra_subnet_suffix)
        if intra_subnet_tags is not None:
            pulumi.set(__self__, "intra_subnet_tags", intra_subnet_tags)
        if intra_subnets is not None:
            pulumi.set(__self__, "intra_subnets", intra_subnets)
        if ipv4_ipam_pool_id is not None:
            pulumi.set(__self__, "ipv4_ipam_pool_id", ipv4_ipam_pool_id)
        if ipv4_netmask_length is not None:
            pulumi.set(__self__, "ipv4_netmask_length", ipv4_netmask_length)
        if ipv6_cidr is not None:
            pulumi.set(__self__, "ipv6_cidr", ipv6_cidr)
        if ipv6_cidr_block_network_border_group is not None:
            pulumi.set(__self__, "ipv6_cidr_block_network_border_group", ipv6_cidr_block_network_border_group)
        if ipv6_ipam_pool_id is not None:
            pulumi.set(__self__, "ipv6_ipam_pool_id", ipv6_ipam_pool_id)
        if ipv6_netmask_length is not None:
            pulumi.set(__self__, "ipv6_netmask_length", ipv6_netmask_length)
        if manage_default_network_acl is not None:
            pulumi.set(__self__, "manage_default_network_acl", manage_default_network_acl)
        if manage_default_route_table is not None:
            pulumi.set(__self__, "manage_default_route_table", manage_default_route_table)
        if manage_default_security_group is not None:
            pulumi.set(__self__, "manage_default_security_group", manage_default_security_group)
        if manage_default_vpc is not None:
            pulumi.set(__self__, "manage_default_vpc", manage_default_vpc)
        if map_customer_owned_ip_on_launch is not None:
            pulumi.set(__self__, "map_customer_owned_ip_on_launch", map_customer_owned_ip_on_launch)
        if map_public_ip_on_launch is not None:
            pulumi.set(__self__, "map_public_ip_on_launch", map_public_ip_on_launch)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat_eip_tags is not None:
            pulumi.set(__self__, "nat_eip_tags", nat_eip_tags)
        if nat_gateway_destination_cidr_block is not None:
            pulumi.set(__self__, "nat_gateway_destination_cidr_block", nat_gateway_destination_cidr_block)
        if nat_gateway_tags is not None:
            pulumi.set(__self__, "nat_gateway_tags", nat_gateway_tags)
        if one_nat_gateway_per_az is not None:
            pulumi.set(__self__, "one_nat_gateway_per_az", one_nat_gateway_per_az)
        if outpost_acl_tags is not None:
            pulumi.set(__self__, "outpost_acl_tags", outpost_acl_tags)
        if outpost_arn is not None:
            pulumi.set(__self__, "outpost_arn", outpost_arn)
        if outpost_az is not None:
            pulumi.set(__self__, "outpost_az", outpost_az)
        if outpost_dedicated_network_acl is not None:
            pulumi.set(__self__, "outpost_dedicated_network_acl", outpost_dedicated_network_acl)
        if outpost_inbound_acl_rules is not None:
            pulumi.set(__self__, "outpost_inbound_acl_rules", outpost_inbound_acl_rules)
        if outpost_outbound_acl_rules is not None:
            pulumi.set(__self__, "outpost_outbound_acl_rules", outpost_outbound_acl_rules)
        if outpost_subnet_assign_ipv6_address_on_creation is not None:
            pulumi.set(__self__, "outpost_subnet_assign_ipv6_address_on_creation", outpost_subnet_assign_ipv6_address_on_creation)
        if outpost_subnet_enable_dns64 is not None:
            pulumi.set(__self__, "outpost_subnet_enable_dns64", outpost_subnet_enable_dns64)
        if outpost_subnet_enable_resource_name_dns_a_record_on_launch is not None:
            pulumi.set(__self__, "outpost_subnet_enable_resource_name_dns_a_record_on_launch", outpost_subnet_enable_resource_name_dns_a_record_on_launch)
        if outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch is not None:
            pulumi.set(__self__, "outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch", outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch)
        if outpost_subnet_ipv6_native is not None:
            pulumi.set(__self__, "outpost_subnet_ipv6_native", outpost_subnet_ipv6_native)
        if outpost_subnet_ipv6_prefixes is not None:
            pulumi.set(__self__, "outpost_subnet_ipv6_prefixes", outpost_subnet_ipv6_prefixes)
        if outpost_subnet_names is not None:
            pulumi.set(__self__, "outpost_subnet_names", outpost_subnet_names)
        if outpost_subnet_private_dns_hostname_type_on_launch is not None:
            pulumi.set(__self__, "outpost_subnet_private_dns_hostname_type_on_launch", outpost_subnet_private_dns_hostname_type_on_launch)
        if outpost_subnet_suffix is not None:
            pulumi.set(__self__, "outpost_subnet_suffix", outpost_subnet_suffix)
        if outpost_subnet_tags is not None:
            pulumi.set(__self__, "outpost_subnet_tags", outpost_subnet_tags)
        if outpost_subnets is not None:
            pulumi.set(__self__, "outpost_subnets", outpost_subnets)
        if private_acl_tags is not None:
            pulumi.set(__self__, "private_acl_tags", private_acl_tags)
        if private_dedicated_network_acl is not None:
            pulumi.set(__self__, "private_dedicated_network_acl", private_dedicated_network_acl)
        if private_inbound_acl_rules is not None:
            pulumi.set(__self__, "private_inbound_acl_rules", private_inbound_acl_rules)
        if private_outbound_acl_rules is not None:
            pulumi.set(__self__, "private_outbound_acl_rules", private_outbound_acl_rules)
        if private_route_table_tags is not None:
            pulumi.set(__self__, "private_route_table_tags", private_route_table_tags)
        if private_subnet_assign_ipv6_address_on_creation is not None:
            pulumi.set(__self__, "private_subnet_assign_ipv6_address_on_creation", private_subnet_assign_ipv6_address_on_creation)
        if private_subnet_enable_dns64 is not None:
            pulumi.set(__self__, "private_subnet_enable_dns64", private_subnet_enable_dns64)
        if private_subnet_enable_resource_name_dns_a_record_on_launch is not None:
            pulumi.set(__self__, "private_subnet_enable_resource_name_dns_a_record_on_launch", private_subnet_enable_resource_name_dns_a_record_on_launch)
        if private_subnet_enable_resource_name_dns_aaaa_record_on_launch is not None:
            pulumi.set(__self__, "private_subnet_enable_resource_name_dns_aaaa_record_on_launch", private_subnet_enable_resource_name_dns_aaaa_record_on_launch)
        if private_subnet_ipv6_native is not None:
            pulumi.set(__self__, "private_subnet_ipv6_native", private_subnet_ipv6_native)
        if private_subnet_ipv6_prefixes is not None:
            pulumi.set(__self__, "private_subnet_ipv6_prefixes", private_subnet_ipv6_prefixes)
        if private_subnet_names is not None:
            pulumi.set(__self__, "private_subnet_names", private_subnet_names)
        if private_subnet_private_dns_hostname_type_on_launch is not None:
            pulumi.set(__self__, "private_subnet_private_dns_hostname_type_on_launch", private_subnet_private_dns_hostname_type_on_launch)
        if private_subnet_suffix is not None:
            pulumi.set(__self__, "private_subnet_suffix", private_subnet_suffix)
        if private_subnet_tags is not None:
            pulumi.set(__self__, "private_subnet_tags", private_subnet_tags)
        if private_subnet_tags_per_az is not None:
            pulumi.set(__self__, "private_subnet_tags_per_az", private_subnet_tags_per_az)
        if private_subnets is not None:
            pulumi.set(__self__, "private_subnets", private_subnets)
        if propagate_intra_route_tables_vgw is not None:
            pulumi.set(__self__, "propagate_intra_route_tables_vgw", propagate_intra_route_tables_vgw)
        if propagate_private_route_tables_vgw is not None:
            pulumi.set(__self__, "propagate_private_route_tables_vgw", propagate_private_route_tables_vgw)
        if propagate_public_route_tables_vgw is not None:
            pulumi.set(__self__, "propagate_public_route_tables_vgw", propagate_public_route_tables_vgw)
        if public_acl_tags is not None:
            pulumi.set(__self__, "public_acl_tags", public_acl_tags)
        if public_dedicated_network_acl is not None:
            pulumi.set(__self__, "public_dedicated_network_acl", public_dedicated_network_acl)
        if public_inbound_acl_rules is not None:
            pulumi.set(__self__, "public_inbound_acl_rules", public_inbound_acl_rules)
        if public_outbound_acl_rules is not None:
            pulumi.set(__self__, "public_outbound_acl_rules", public_outbound_acl_rules)
        if public_route_table_tags is not None:
            pulumi.set(__self__, "public_route_table_tags", public_route_table_tags)
        if public_subnet_assign_ipv6_address_on_creation is not None:
            pulumi.set(__self__, "public_subnet_assign_ipv6_address_on_creation", public_subnet_assign_ipv6_address_on_creation)
        if public_subnet_enable_dns64 is not None:
            pulumi.set(__self__, "public_subnet_enable_dns64", public_subnet_enable_dns64)
        if public_subnet_enable_resource_name_dns_a_record_on_launch is not None:
            pulumi.set(__self__, "public_subnet_enable_resource_name_dns_a_record_on_launch", public_subnet_enable_resource_name_dns_a_record_on_launch)
        if public_subnet_enable_resource_name_dns_aaaa_record_on_launch is not None:
            pulumi.set(__self__, "public_subnet_enable_resource_name_dns_aaaa_record_on_launch", public_subnet_enable_resource_name_dns_aaaa_record_on_launch)
        if public_subnet_ipv6_native is not None:
            pulumi.set(__self__, "public_subnet_ipv6_native", public_subnet_ipv6_native)
        if public_subnet_ipv6_prefixes is not None:
            pulumi.set(__self__, "public_subnet_ipv6_prefixes", public_subnet_ipv6_prefixes)
        if public_subnet_names is not None:
            pulumi.set(__self__, "public_subnet_names", public_subnet_names)
        if public_subnet_private_dns_hostname_type_on_launch is not None:
            pulumi.set(__self__, "public_subnet_private_dns_hostname_type_on_launch", public_subnet_private_dns_hostname_type_on_launch)
        if public_subnet_suffix is not None:
            pulumi.set(__self__, "public_subnet_suffix", public_subnet_suffix)
        if public_subnet_tags is not None:
            pulumi.set(__self__, "public_subnet_tags", public_subnet_tags)
        if public_subnet_tags_per_az is not None:
            pulumi.set(__self__, "public_subnet_tags_per_az", public_subnet_tags_per_az)
        if public_subnets is not None:
            pulumi.set(__self__, "public_subnets", public_subnets)
        if putin_khuylo is not None:
            pulumi.set(__self__, "putin_khuylo", putin_khuylo)
        if redshift_acl_tags is not None:
            pulumi.set(__self__, "redshift_acl_tags", redshift_acl_tags)
        if redshift_dedicated_network_acl is not None:
            pulumi.set(__self__, "redshift_dedicated_network_acl", redshift_dedicated_network_acl)
        if redshift_inbound_acl_rules is not None:
            pulumi.set(__self__, "redshift_inbound_acl_rules", redshift_inbound_acl_rules)
        if redshift_outbound_acl_rules is not None:
            pulumi.set(__self__, "redshift_outbound_acl_rules", redshift_outbound_acl_rules)
        if redshift_route_table_tags is not None:
            pulumi.set(__self__, "redshift_route_table_tags", redshift_route_table_tags)
        if redshift_subnet_assign_ipv6_address_on_creation is not None:
            pulumi.set(__self__, "redshift_subnet_assign_ipv6_address_on_creation", redshift_subnet_assign_ipv6_address_on_creation)
        if redshift_subnet_enable_dns64 is not None:
            pulumi.set(__self__, "redshift_subnet_enable_dns64", redshift_subnet_enable_dns64)
        if redshift_subnet_enable_resource_name_dns_a_record_on_launch is not None:
            pulumi.set(__self__, "redshift_subnet_enable_resource_name_dns_a_record_on_launch", redshift_subnet_enable_resource_name_dns_a_record_on_launch)
        if redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch is not None:
            pulumi.set(__self__, "redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch", redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch)
        if redshift_subnet_group_name is not None:
            pulumi.set(__self__, "redshift_subnet_group_name", redshift_subnet_group_name)
        if redshift_subnet_group_tags is not None:
            pulumi.set(__self__, "redshift_subnet_group_tags", redshift_subnet_group_tags)
        if redshift_subnet_ipv6_native is not None:
            pulumi.set(__self__, "redshift_subnet_ipv6_native", redshift_subnet_ipv6_native)
        if redshift_subnet_ipv6_prefixes is not None:
            pulumi.set(__self__, "redshift_subnet_ipv6_prefixes", redshift_subnet_ipv6_prefixes)
        if redshift_subnet_names is not None:
            pulumi.set(__self__, "redshift_subnet_names", redshift_subnet_names)
        if redshift_subnet_private_dns_hostname_type_on_launch is not None:
            pulumi.set(__self__, "redshift_subnet_private_dns_hostname_type_on_launch", redshift_subnet_private_dns_hostname_type_on_launch)
        if redshift_subnet_suffix is not None:
            pulumi.set(__self__, "redshift_subnet_suffix", redshift_subnet_suffix)
        if redshift_subnet_tags is not None:
            pulumi.set(__self__, "redshift_subnet_tags", redshift_subnet_tags)
        if redshift_subnets is not None:
            pulumi.set(__self__, "redshift_subnets", redshift_subnets)
        if reuse_nat_ips is not None:
            pulumi.set(__self__, "reuse_nat_ips", reuse_nat_ips)
        if secondary_cidr_blocks is not None:
            pulumi.set(__self__, "secondary_cidr_blocks", secondary_cidr_blocks)
        if single_nat_gateway is not None:
            pulumi.set(__self__, "single_nat_gateway", single_nat_gateway)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if use_ipam_pool is not None:
            pulumi.set(__self__, "use_ipam_pool", use_ipam_pool)
        if vpc_flow_log_iam_policy_name is not None:
            pulumi.set(__self__, "vpc_flow_log_iam_policy_name", vpc_flow_log_iam_policy_name)
        if vpc_flow_log_iam_policy_use_name_prefix is not None:
            pulumi.set(__self__, "vpc_flow_log_iam_policy_use_name_prefix", vpc_flow_log_iam_policy_use_name_prefix)
        if vpc_flow_log_iam_role_name is not None:
            pulumi.set(__self__, "vpc_flow_log_iam_role_name", vpc_flow_log_iam_role_name)
        if vpc_flow_log_iam_role_use_name_prefix is not None:
            pulumi.set(__self__, "vpc_flow_log_iam_role_use_name_prefix", vpc_flow_log_iam_role_use_name_prefix)
        if vpc_flow_log_permissions_boundary is not None:
            pulumi.set(__self__, "vpc_flow_log_permissions_boundary", vpc_flow_log_permissions_boundary)
        if vpc_flow_log_tags is not None:
            pulumi.set(__self__, "vpc_flow_log_tags", vpc_flow_log_tags)
        if vpc_tags is not None:
            pulumi.set(__self__, "vpc_tags", vpc_tags)
        if vpn_gateway_az is not None:
            pulumi.set(__self__, "vpn_gateway_az", vpn_gateway_az)
        if vpn_gateway_id is not None:
            pulumi.set(__self__, "vpn_gateway_id", vpn_gateway_id)
        if vpn_gateway_tags is not None:
            pulumi.set(__self__, "vpn_gateway_tags", vpn_gateway_tags)

    @property
    @pulumi.getter
    def amazon_side_asn(self) -> Optional[pulumi.Input[str]]:
        """
        The Autonomous System Number (ASN) for the Amazon side of the gateway. By default the virtual private gateway is created with the current default Amazon ASN
        """
        return pulumi.get(self, "amazon_side_asn")

    @amazon_side_asn.setter
    def amazon_side_asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amazon_side_asn", value)

    @property
    @pulumi.getter
    def azs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of availability zones names or ids in the region
        """
        return pulumi.get(self, "azs")

    @azs.setter
    def azs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "azs", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4_netmask_length` & `ipv4_ipam_pool_id`
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def create_database_internet_gateway_route(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if an internet gateway route for public database access should be created
        """
        return pulumi.get(self, "create_database_internet_gateway_route")

    @create_database_internet_gateway_route.setter
    def create_database_internet_gateway_route(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_database_internet_gateway_route", value)

    @property
    @pulumi.getter
    def create_database_nat_gateway_route(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if a nat gateway route should be created to give internet access to the database subnets
        """
        return pulumi.get(self, "create_database_nat_gateway_route")

    @create_database_nat_gateway_route.setter
    def create_database_nat_gateway_route(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_database_nat_gateway_route", value)

    @property
    @pulumi.getter
    def create_database_subnet_group(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if database subnet group should be created (n.b. database_subnets must also be set)
        """
        return pulumi.get(self, "create_database_subnet_group")

    @create_database_subnet_group.setter
    def create_database_subnet_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_database_subnet_group", value)

    @property
    @pulumi.getter
    def create_database_subnet_route_table(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if separate route table for database should be created
        """
        return pulumi.get(self, "create_database_subnet_route_table")

    @create_database_subnet_route_table.setter
    def create_database_subnet_route_table(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_database_subnet_route_table", value)

    @property
    @pulumi.getter
    def create_egress_only_igw(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if an Egress Only Internet Gateway is created and its related routes
        """
        return pulumi.get(self, "create_egress_only_igw")

    @create_egress_only_igw.setter
    def create_egress_only_igw(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_egress_only_igw", value)

    @property
    @pulumi.getter
    def create_elasticache_subnet_group(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if elasticache subnet group should be created
        """
        return pulumi.get(self, "create_elasticache_subnet_group")

    @create_elasticache_subnet_group.setter
    def create_elasticache_subnet_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_elasticache_subnet_group", value)

    @property
    @pulumi.getter
    def create_elasticache_subnet_route_table(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if separate route table for elasticache should be created
        """
        return pulumi.get(self, "create_elasticache_subnet_route_table")

    @create_elasticache_subnet_route_table.setter
    def create_elasticache_subnet_route_table(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_elasticache_subnet_route_table", value)

    @property
    @pulumi.getter
    def create_flow_log_cloudwatch_iam_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create IAM role for VPC Flow Logs
        """
        return pulumi.get(self, "create_flow_log_cloudwatch_iam_role")

    @create_flow_log_cloudwatch_iam_role.setter
    def create_flow_log_cloudwatch_iam_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_flow_log_cloudwatch_iam_role", value)

    @property
    @pulumi.getter
    def create_flow_log_cloudwatch_log_group(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create CloudWatch log group for VPC Flow Logs
        """
        return pulumi.get(self, "create_flow_log_cloudwatch_log_group")

    @create_flow_log_cloudwatch_log_group.setter
    def create_flow_log_cloudwatch_log_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_flow_log_cloudwatch_log_group", value)

    @property
    @pulumi.getter
    def create_igw(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if an Internet Gateway is created for public subnets and the related routes that connect them
        """
        return pulumi.get(self, "create_igw")

    @create_igw.setter
    def create_igw(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_igw", value)

    @property
    @pulumi.getter
    def create_multiple_intra_route_tables(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create a separate route table for each intra subnet. Default: `false`
        """
        return pulumi.get(self, "create_multiple_intra_route_tables")

    @create_multiple_intra_route_tables.setter
    def create_multiple_intra_route_tables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_multiple_intra_route_tables", value)

    @property
    @pulumi.getter
    def create_multiple_public_route_tables(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create a separate route table for each public subnet. Default: `false`
        """
        return pulumi.get(self, "create_multiple_public_route_tables")

    @create_multiple_public_route_tables.setter
    def create_multiple_public_route_tables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_multiple_public_route_tables", value)

    @property
    @pulumi.getter
    def create_private_nat_gateway_route(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if a nat gateway route should be created to give internet access to the private subnets
        """
        return pulumi.get(self, "create_private_nat_gateway_route")

    @create_private_nat_gateway_route.setter
    def create_private_nat_gateway_route(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_private_nat_gateway_route", value)

    @property
    @pulumi.getter
    def create_redshift_subnet_group(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if redshift subnet group should be created
        """
        return pulumi.get(self, "create_redshift_subnet_group")

    @create_redshift_subnet_group.setter
    def create_redshift_subnet_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_redshift_subnet_group", value)

    @property
    @pulumi.getter
    def create_redshift_subnet_route_table(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if separate route table for redshift should be created
        """
        return pulumi.get(self, "create_redshift_subnet_route_table")

    @create_redshift_subnet_route_table.setter
    def create_redshift_subnet_route_table(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_redshift_subnet_route_table", value)

    @property
    @pulumi.getter
    def create_vpc(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if VPC should be created (it affects almost all resources)
        """
        return pulumi.get(self, "create_vpc")

    @create_vpc.setter
    def create_vpc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_vpc", value)

    @property
    @pulumi.getter
    def customer_gateway_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the Customer Gateway
        """
        return pulumi.get(self, "customer_gateway_tags")

    @customer_gateway_tags.setter
    def customer_gateway_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "customer_gateway_tags", value)

    @property
    @pulumi.getter
    def customer_gateways(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Maps of Customer Gateway's attributes (BGP ASN and Gateway's Internet-routable external IP address)
        """
        return pulumi.get(self, "customer_gateways")

    @customer_gateways.setter
    def customer_gateways(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "customer_gateways", value)

    @property
    @pulumi.getter
    def customer_owned_ipv4_pool(self) -> Optional[pulumi.Input[str]]:
        """
        The customer owned IPv4 address pool. Typically used with the `map_customer_owned_ip_on_launch` argument. The `outpost_arn` argument must be specified when configured
        """
        return pulumi.get(self, "customer_owned_ipv4_pool")

    @customer_owned_ipv4_pool.setter
    def customer_owned_ipv4_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_owned_ipv4_pool", value)

    @property
    @pulumi.getter
    def database_acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the database subnets network ACL
        """
        return pulumi.get(self, "database_acl_tags")

    @database_acl_tags.setter
    def database_acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "database_acl_tags", value)

    @property
    @pulumi.getter
    def database_dedicated_network_acl(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use dedicated network ACL (not default) and custom rules for database subnets
        """
        return pulumi.get(self, "database_dedicated_network_acl")

    @database_dedicated_network_acl.setter
    def database_dedicated_network_acl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "database_dedicated_network_acl", value)

    @property
    @pulumi.getter
    def database_inbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Database subnets inbound network ACL rules
        """
        return pulumi.get(self, "database_inbound_acl_rules")

    @database_inbound_acl_rules.setter
    def database_inbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "database_inbound_acl_rules", value)

    @property
    @pulumi.getter
    def database_outbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Database subnets outbound network ACL rules
        """
        return pulumi.get(self, "database_outbound_acl_rules")

    @database_outbound_acl_rules.setter
    def database_outbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "database_outbound_acl_rules", value)

    @property
    @pulumi.getter
    def database_route_table_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the database route tables
        """
        return pulumi.get(self, "database_route_table_tags")

    @database_route_table_tags.setter
    def database_route_table_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "database_route_table_tags", value)

    @property
    @pulumi.getter
    def database_subnet_assign_ipv6_address_on_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        """
        return pulumi.get(self, "database_subnet_assign_ipv6_address_on_creation")

    @database_subnet_assign_ipv6_address_on_creation.setter
    def database_subnet_assign_ipv6_address_on_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "database_subnet_assign_ipv6_address_on_creation", value)

    @property
    @pulumi.getter
    def database_subnet_enable_dns64(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        """
        return pulumi.get(self, "database_subnet_enable_dns64")

    @database_subnet_enable_dns64.setter
    def database_subnet_enable_dns64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "database_subnet_enable_dns64", value)

    @property
    @pulumi.getter
    def database_subnet_enable_resource_name_dns_a_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        """
        return pulumi.get(self, "database_subnet_enable_resource_name_dns_a_record_on_launch")

    @database_subnet_enable_resource_name_dns_a_record_on_launch.setter
    def database_subnet_enable_resource_name_dns_a_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "database_subnet_enable_resource_name_dns_a_record_on_launch", value)

    @property
    @pulumi.getter
    def database_subnet_enable_resource_name_dns_aaaa_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        """
        return pulumi.get(self, "database_subnet_enable_resource_name_dns_aaaa_record_on_launch")

    @database_subnet_enable_resource_name_dns_aaaa_record_on_launch.setter
    def database_subnet_enable_resource_name_dns_aaaa_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "database_subnet_enable_resource_name_dns_aaaa_record_on_launch", value)

    @property
    @pulumi.getter
    def database_subnet_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of database subnet group
        """
        return pulumi.get(self, "database_subnet_group_name")

    @database_subnet_group_name.setter
    def database_subnet_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_subnet_group_name", value)

    @property
    @pulumi.getter
    def database_subnet_group_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the database subnet group
        """
        return pulumi.get(self, "database_subnet_group_tags")

    @database_subnet_group_tags.setter
    def database_subnet_group_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "database_subnet_group_tags", value)

    @property
    @pulumi.getter
    def database_subnet_ipv6_native(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create an IPv6-only subnet. Default: `false`
        """
        return pulumi.get(self, "database_subnet_ipv6_native")

    @database_subnet_ipv6_native.setter
    def database_subnet_ipv6_native(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "database_subnet_ipv6_native", value)

    @property
    @pulumi.getter
    def database_subnet_ipv6_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Assigns IPv6 database subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        """
        return pulumi.get(self, "database_subnet_ipv6_prefixes")

    @database_subnet_ipv6_prefixes.setter
    def database_subnet_ipv6_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "database_subnet_ipv6_prefixes", value)

    @property
    @pulumi.getter
    def database_subnet_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Explicit values to use in the Name tag on database subnets. If empty, Name tags are generated
        """
        return pulumi.get(self, "database_subnet_names")

    @database_subnet_names.setter
    def database_subnet_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "database_subnet_names", value)

    @property
    @pulumi.getter
    def database_subnet_private_dns_hostname_type_on_launch(self) -> Optional[pulumi.Input[str]]:
        """
        The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        """
        return pulumi.get(self, "database_subnet_private_dns_hostname_type_on_launch")

    @database_subnet_private_dns_hostname_type_on_launch.setter
    def database_subnet_private_dns_hostname_type_on_launch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_subnet_private_dns_hostname_type_on_launch", value)

    @property
    @pulumi.getter
    def database_subnet_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Suffix to append to database subnets name
        """
        return pulumi.get(self, "database_subnet_suffix")

    @database_subnet_suffix.setter
    def database_subnet_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_subnet_suffix", value)

    @property
    @pulumi.getter
    def database_subnet_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the database subnets
        """
        return pulumi.get(self, "database_subnet_tags")

    @database_subnet_tags.setter
    def database_subnet_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "database_subnet_tags", value)

    @property
    @pulumi.getter
    def database_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of database subnets inside the VPC
        """
        return pulumi.get(self, "database_subnets")

    @database_subnets.setter
    def database_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "database_subnets", value)

    @property
    @pulumi.getter
    def default_network_acl_egress(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        List of maps of egress rules to set on the Default Network ACL
        """
        return pulumi.get(self, "default_network_acl_egress")

    @default_network_acl_egress.setter
    def default_network_acl_egress(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "default_network_acl_egress", value)

    @property
    @pulumi.getter
    def default_network_acl_ingress(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        List of maps of ingress rules to set on the Default Network ACL
        """
        return pulumi.get(self, "default_network_acl_ingress")

    @default_network_acl_ingress.setter
    def default_network_acl_ingress(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "default_network_acl_ingress", value)

    @property
    @pulumi.getter
    def default_network_acl_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to be used on the Default Network ACL
        """
        return pulumi.get(self, "default_network_acl_name")

    @default_network_acl_name.setter
    def default_network_acl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_network_acl_name", value)

    @property
    @pulumi.getter
    def default_network_acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the Default Network ACL
        """
        return pulumi.get(self, "default_network_acl_tags")

    @default_network_acl_tags.setter
    def default_network_acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "default_network_acl_tags", value)

    @property
    @pulumi.getter
    def default_route_table_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to be used on the default route table
        """
        return pulumi.get(self, "default_route_table_name")

    @default_route_table_name.setter
    def default_route_table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_route_table_name", value)

    @property
    @pulumi.getter
    def default_route_table_propagating_vgws(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of virtual gateways for propagation
        """
        return pulumi.get(self, "default_route_table_propagating_vgws")

    @default_route_table_propagating_vgws.setter
    def default_route_table_propagating_vgws(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "default_route_table_propagating_vgws", value)

    @property
    @pulumi.getter
    def default_route_table_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Configuration block of routes. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_route_table#route
        """
        return pulumi.get(self, "default_route_table_routes")

    @default_route_table_routes.setter
    def default_route_table_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "default_route_table_routes", value)

    @property
    @pulumi.getter
    def default_route_table_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the default route table
        """
        return pulumi.get(self, "default_route_table_tags")

    @default_route_table_tags.setter
    def default_route_table_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "default_route_table_tags", value)

    @property
    @pulumi.getter
    def default_security_group_egress(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        List of maps of egress rules to set on the default security group
        """
        return pulumi.get(self, "default_security_group_egress")

    @default_security_group_egress.setter
    def default_security_group_egress(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "default_security_group_egress", value)

    @property
    @pulumi.getter
    def default_security_group_ingress(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        List of maps of ingress rules to set on the default security group
        """
        return pulumi.get(self, "default_security_group_ingress")

    @default_security_group_ingress.setter
    def default_security_group_ingress(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "default_security_group_ingress", value)

    @property
    @pulumi.getter
    def default_security_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to be used on the default security group
        """
        return pulumi.get(self, "default_security_group_name")

    @default_security_group_name.setter
    def default_security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_security_group_name", value)

    @property
    @pulumi.getter
    def default_security_group_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the default security group
        """
        return pulumi.get(self, "default_security_group_tags")

    @default_security_group_tags.setter
    def default_security_group_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "default_security_group_tags", value)

    @property
    @pulumi.getter
    def default_vpc_enable_dns_hostnames(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true to enable DNS hostnames in the Default VPC
        """
        return pulumi.get(self, "default_vpc_enable_dns_hostnames")

    @default_vpc_enable_dns_hostnames.setter
    def default_vpc_enable_dns_hostnames(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_vpc_enable_dns_hostnames", value)

    @property
    @pulumi.getter
    def default_vpc_enable_dns_support(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true to enable DNS support in the Default VPC
        """
        return pulumi.get(self, "default_vpc_enable_dns_support")

    @default_vpc_enable_dns_support.setter
    def default_vpc_enable_dns_support(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_vpc_enable_dns_support", value)

    @property
    @pulumi.getter
    def default_vpc_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to be used on the Default VPC
        """
        return pulumi.get(self, "default_vpc_name")

    @default_vpc_name.setter
    def default_vpc_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_vpc_name", value)

    @property
    @pulumi.getter
    def default_vpc_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the Default VPC
        """
        return pulumi.get(self, "default_vpc_tags")

    @default_vpc_tags.setter
    def default_vpc_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "default_vpc_tags", value)

    @property
    @pulumi.getter
    def dhcp_options_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies DNS name for DHCP options set (requires enable_dhcp_options set to true)
        """
        return pulumi.get(self, "dhcp_options_domain_name")

    @dhcp_options_domain_name.setter
    def dhcp_options_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_options_domain_name", value)

    @property
    @pulumi.getter
    def dhcp_options_domain_name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify a list of DNS server addresses for DHCP options set, default to AWS provided (requires enable_dhcp_options set to true)
        """
        return pulumi.get(self, "dhcp_options_domain_name_servers")

    @dhcp_options_domain_name_servers.setter
    def dhcp_options_domain_name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dhcp_options_domain_name_servers", value)

    @property
    @pulumi.getter
    def dhcp_options_ipv6_address_preferred_lease_time(self) -> Optional[pulumi.Input[float]]:
        """
        How frequently, in seconds, a running instance with an IPv6 assigned to it goes through DHCPv6 lease renewal (requires enable_dhcp_options set to true)
        """
        return pulumi.get(self, "dhcp_options_ipv6_address_preferred_lease_time")

    @dhcp_options_ipv6_address_preferred_lease_time.setter
    def dhcp_options_ipv6_address_preferred_lease_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dhcp_options_ipv6_address_preferred_lease_time", value)

    @property
    @pulumi.getter
    def dhcp_options_netbios_name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify a list of netbios servers for DHCP options set (requires enable_dhcp_options set to true)
        """
        return pulumi.get(self, "dhcp_options_netbios_name_servers")

    @dhcp_options_netbios_name_servers.setter
    def dhcp_options_netbios_name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dhcp_options_netbios_name_servers", value)

    @property
    @pulumi.getter
    def dhcp_options_netbios_node_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify netbios node_type for DHCP options set (requires enable_dhcp_options set to true)
        """
        return pulumi.get(self, "dhcp_options_netbios_node_type")

    @dhcp_options_netbios_node_type.setter
    def dhcp_options_netbios_node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_options_netbios_node_type", value)

    @property
    @pulumi.getter
    def dhcp_options_ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify a list of NTP servers for DHCP options set (requires enable_dhcp_options set to true)
        """
        return pulumi.get(self, "dhcp_options_ntp_servers")

    @dhcp_options_ntp_servers.setter
    def dhcp_options_ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dhcp_options_ntp_servers", value)

    @property
    @pulumi.getter
    def dhcp_options_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the DHCP option set (requires enable_dhcp_options set to true)
        """
        return pulumi.get(self, "dhcp_options_tags")

    @dhcp_options_tags.setter
    def dhcp_options_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "dhcp_options_tags", value)

    @property
    @pulumi.getter
    def elasticache_acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the elasticache subnets network ACL
        """
        return pulumi.get(self, "elasticache_acl_tags")

    @elasticache_acl_tags.setter
    def elasticache_acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "elasticache_acl_tags", value)

    @property
    @pulumi.getter
    def elasticache_dedicated_network_acl(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use dedicated network ACL (not default) and custom rules for elasticache subnets
        """
        return pulumi.get(self, "elasticache_dedicated_network_acl")

    @elasticache_dedicated_network_acl.setter
    def elasticache_dedicated_network_acl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticache_dedicated_network_acl", value)

    @property
    @pulumi.getter
    def elasticache_inbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Elasticache subnets inbound network ACL rules
        """
        return pulumi.get(self, "elasticache_inbound_acl_rules")

    @elasticache_inbound_acl_rules.setter
    def elasticache_inbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "elasticache_inbound_acl_rules", value)

    @property
    @pulumi.getter
    def elasticache_outbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Elasticache subnets outbound network ACL rules
        """
        return pulumi.get(self, "elasticache_outbound_acl_rules")

    @elasticache_outbound_acl_rules.setter
    def elasticache_outbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "elasticache_outbound_acl_rules", value)

    @property
    @pulumi.getter
    def elasticache_route_table_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the elasticache route tables
        """
        return pulumi.get(self, "elasticache_route_table_tags")

    @elasticache_route_table_tags.setter
    def elasticache_route_table_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "elasticache_route_table_tags", value)

    @property
    @pulumi.getter
    def elasticache_subnet_assign_ipv6_address_on_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        """
        return pulumi.get(self, "elasticache_subnet_assign_ipv6_address_on_creation")

    @elasticache_subnet_assign_ipv6_address_on_creation.setter
    def elasticache_subnet_assign_ipv6_address_on_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticache_subnet_assign_ipv6_address_on_creation", value)

    @property
    @pulumi.getter
    def elasticache_subnet_enable_dns64(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        """
        return pulumi.get(self, "elasticache_subnet_enable_dns64")

    @elasticache_subnet_enable_dns64.setter
    def elasticache_subnet_enable_dns64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticache_subnet_enable_dns64", value)

    @property
    @pulumi.getter
    def elasticache_subnet_enable_resource_name_dns_a_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        """
        return pulumi.get(self, "elasticache_subnet_enable_resource_name_dns_a_record_on_launch")

    @elasticache_subnet_enable_resource_name_dns_a_record_on_launch.setter
    def elasticache_subnet_enable_resource_name_dns_a_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticache_subnet_enable_resource_name_dns_a_record_on_launch", value)

    @property
    @pulumi.getter
    def elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        """
        return pulumi.get(self, "elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch")

    @elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch.setter
    def elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch", value)

    @property
    @pulumi.getter
    def elasticache_subnet_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of elasticache subnet group
        """
        return pulumi.get(self, "elasticache_subnet_group_name")

    @elasticache_subnet_group_name.setter
    def elasticache_subnet_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticache_subnet_group_name", value)

    @property
    @pulumi.getter
    def elasticache_subnet_group_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the elasticache subnet group
        """
        return pulumi.get(self, "elasticache_subnet_group_tags")

    @elasticache_subnet_group_tags.setter
    def elasticache_subnet_group_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "elasticache_subnet_group_tags", value)

    @property
    @pulumi.getter
    def elasticache_subnet_ipv6_native(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create an IPv6-only subnet. Default: `false`
        """
        return pulumi.get(self, "elasticache_subnet_ipv6_native")

    @elasticache_subnet_ipv6_native.setter
    def elasticache_subnet_ipv6_native(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elasticache_subnet_ipv6_native", value)

    @property
    @pulumi.getter
    def elasticache_subnet_ipv6_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Assigns IPv6 elasticache subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        """
        return pulumi.get(self, "elasticache_subnet_ipv6_prefixes")

    @elasticache_subnet_ipv6_prefixes.setter
    def elasticache_subnet_ipv6_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elasticache_subnet_ipv6_prefixes", value)

    @property
    @pulumi.getter
    def elasticache_subnet_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Explicit values to use in the Name tag on elasticache subnets. If empty, Name tags are generated
        """
        return pulumi.get(self, "elasticache_subnet_names")

    @elasticache_subnet_names.setter
    def elasticache_subnet_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elasticache_subnet_names", value)

    @property
    @pulumi.getter
    def elasticache_subnet_private_dns_hostname_type_on_launch(self) -> Optional[pulumi.Input[str]]:
        """
        The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        """
        return pulumi.get(self, "elasticache_subnet_private_dns_hostname_type_on_launch")

    @elasticache_subnet_private_dns_hostname_type_on_launch.setter
    def elasticache_subnet_private_dns_hostname_type_on_launch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticache_subnet_private_dns_hostname_type_on_launch", value)

    @property
    @pulumi.getter
    def elasticache_subnet_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Suffix to append to elasticache subnets name
        """
        return pulumi.get(self, "elasticache_subnet_suffix")

    @elasticache_subnet_suffix.setter
    def elasticache_subnet_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticache_subnet_suffix", value)

    @property
    @pulumi.getter
    def elasticache_subnet_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the elasticache subnets
        """
        return pulumi.get(self, "elasticache_subnet_tags")

    @elasticache_subnet_tags.setter
    def elasticache_subnet_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "elasticache_subnet_tags", value)

    @property
    @pulumi.getter
    def elasticache_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of elasticache subnets inside the VPC
        """
        return pulumi.get(self, "elasticache_subnets")

    @elasticache_subnets.setter
    def elasticache_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elasticache_subnets", value)

    @property
    @pulumi.getter
    def enable_dhcp_options(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true if you want to specify a DHCP options set with a custom domain name, DNS servers, NTP servers, netbios servers, and/or netbios server type
        """
        return pulumi.get(self, "enable_dhcp_options")

    @enable_dhcp_options.setter
    def enable_dhcp_options(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_dhcp_options", value)

    @property
    @pulumi.getter
    def enable_dns_hostnames(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true to enable DNS hostnames in the VPC
        """
        return pulumi.get(self, "enable_dns_hostnames")

    @enable_dns_hostnames.setter
    def enable_dns_hostnames(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_dns_hostnames", value)

    @property
    @pulumi.getter
    def enable_dns_support(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true to enable DNS support in the VPC
        """
        return pulumi.get(self, "enable_dns_support")

    @enable_dns_support.setter
    def enable_dns_support(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_dns_support", value)

    @property
    @pulumi.getter
    def enable_flow_log(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to enable VPC Flow Logs
        """
        return pulumi.get(self, "enable_flow_log")

    @enable_flow_log.setter
    def enable_flow_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_flow_log", value)

    @property
    @pulumi.getter
    def enable_ipv6(self) -> Optional[pulumi.Input[bool]]:
        """
        Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block
        """
        return pulumi.get(self, "enable_ipv6")

    @enable_ipv6.setter
    def enable_ipv6(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ipv6", value)

    @property
    @pulumi.getter
    def enable_nat_gateway(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true if you want to provision NAT Gateways for each of your private networks
        """
        return pulumi.get(self, "enable_nat_gateway")

    @enable_nat_gateway.setter
    def enable_nat_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_nat_gateway", value)

    @property
    @pulumi.getter
    def enable_network_address_usage_metrics(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether network address usage metrics are enabled for the VPC
        """
        return pulumi.get(self, "enable_network_address_usage_metrics")

    @enable_network_address_usage_metrics.setter
    def enable_network_address_usage_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_network_address_usage_metrics", value)

    @property
    @pulumi.getter
    def enable_public_redshift(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if redshift should have public routing table
        """
        return pulumi.get(self, "enable_public_redshift")

    @enable_public_redshift.setter
    def enable_public_redshift(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_public_redshift", value)

    @property
    @pulumi.getter
    def enable_vpn_gateway(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true if you want to create a new VPN Gateway resource and attach it to the VPC
        """
        return pulumi.get(self, "enable_vpn_gateway")

    @enable_vpn_gateway.setter
    def enable_vpn_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_vpn_gateway", value)

    @property
    @pulumi.getter
    def external_nat_ip_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of EIP IDs to be assigned to the NAT Gateways (used in combination with reuse_nat_ips)
        """
        return pulumi.get(self, "external_nat_ip_ids")

    @external_nat_ip_ids.setter
    def external_nat_ip_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_nat_ip_ids", value)

    @property
    @pulumi.getter
    def external_nat_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of EIPs to be used for `nat_public_ips` output (used in combination with reuse_nat_ips and external_nat_ip_ids)
        """
        return pulumi.get(self, "external_nat_ips")

    @external_nat_ips.setter
    def external_nat_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_nat_ips", value)

    @property
    @pulumi.getter
    def flow_log_cloudwatch_iam_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group. When flow_log_destination_arn is set to ARN of Cloudwatch Logs, this argument needs to be provided
        """
        return pulumi.get(self, "flow_log_cloudwatch_iam_role_arn")

    @flow_log_cloudwatch_iam_role_arn.setter
    def flow_log_cloudwatch_iam_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_cloudwatch_iam_role_arn", value)

    @property
    @pulumi.getter
    def flow_log_cloudwatch_iam_role_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowLogCloudwatchIamRoleConditionsArgs']]]]:
        """
        Additional conditions of the CloudWatch role assumption policy
        """
        return pulumi.get(self, "flow_log_cloudwatch_iam_role_conditions")

    @flow_log_cloudwatch_iam_role_conditions.setter
    def flow_log_cloudwatch_iam_role_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowLogCloudwatchIamRoleConditionsArgs']]]]):
        pulumi.set(self, "flow_log_cloudwatch_iam_role_conditions", value)

    @property
    @pulumi.getter
    def flow_log_cloudwatch_log_group_class(self) -> Optional[pulumi.Input[str]]:
        """
        Specified the log class of the log group. Possible values are: STANDARD or INFREQUENT_ACCESS
        """
        return pulumi.get(self, "flow_log_cloudwatch_log_group_class")

    @flow_log_cloudwatch_log_group_class.setter
    def flow_log_cloudwatch_log_group_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_cloudwatch_log_group_class", value)

    @property
    @pulumi.getter
    def flow_log_cloudwatch_log_group_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the KMS Key to use when encrypting log data for VPC flow logs
        """
        return pulumi.get(self, "flow_log_cloudwatch_log_group_kms_key_id")

    @flow_log_cloudwatch_log_group_kms_key_id.setter
    def flow_log_cloudwatch_log_group_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_cloudwatch_log_group_kms_key_id", value)

    @property
    @pulumi.getter
    def flow_log_cloudwatch_log_group_name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name prefix of CloudWatch Log Group for VPC flow logs
        """
        return pulumi.get(self, "flow_log_cloudwatch_log_group_name_prefix")

    @flow_log_cloudwatch_log_group_name_prefix.setter
    def flow_log_cloudwatch_log_group_name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_cloudwatch_log_group_name_prefix", value)

    @property
    @pulumi.getter
    def flow_log_cloudwatch_log_group_name_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name suffix of CloudWatch Log Group for VPC flow logs
        """
        return pulumi.get(self, "flow_log_cloudwatch_log_group_name_suffix")

    @flow_log_cloudwatch_log_group_name_suffix.setter
    def flow_log_cloudwatch_log_group_name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_cloudwatch_log_group_name_suffix", value)

    @property
    @pulumi.getter
    def flow_log_cloudwatch_log_group_retention_in_days(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the number of days you want to retain log events in the specified log group for VPC flow logs
        """
        return pulumi.get(self, "flow_log_cloudwatch_log_group_retention_in_days")

    @flow_log_cloudwatch_log_group_retention_in_days.setter
    def flow_log_cloudwatch_log_group_retention_in_days(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "flow_log_cloudwatch_log_group_retention_in_days", value)

    @property
    @pulumi.getter
    def flow_log_cloudwatch_log_group_skip_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
         Set to true if you do not wish the log group (and any logs it may contain) to be deleted at destroy time, and instead just remove the log group from the Terraform state
        """
        return pulumi.get(self, "flow_log_cloudwatch_log_group_skip_destroy")

    @flow_log_cloudwatch_log_group_skip_destroy.setter
    def flow_log_cloudwatch_log_group_skip_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flow_log_cloudwatch_log_group_skip_destroy", value)

    @property
    @pulumi.getter
    def flow_log_deliver_cross_account_role(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
        """
        return pulumi.get(self, "flow_log_deliver_cross_account_role")

    @flow_log_deliver_cross_account_role.setter
    def flow_log_deliver_cross_account_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_deliver_cross_account_role", value)

    @property
    @pulumi.getter
    def flow_log_destination_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the CloudWatch log group or S3 bucket where VPC Flow Logs will be pushed. If this ARN is a S3 bucket the appropriate permissions need to be set on that bucket's policy. When create_flow_log_cloudwatch_log_group is set to false this argument must be provided
        """
        return pulumi.get(self, "flow_log_destination_arn")

    @flow_log_destination_arn.setter
    def flow_log_destination_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_destination_arn", value)

    @property
    @pulumi.getter
    def flow_log_destination_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of flow log destination. Can be s3, kinesis-data-firehose or cloud-watch-logs
        """
        return pulumi.get(self, "flow_log_destination_type")

    @flow_log_destination_type.setter
    def flow_log_destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_destination_type", value)

    @property
    @pulumi.getter
    def flow_log_file_format(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) The format for the flow log. Valid values: `plain-text`, `parquet`
        """
        return pulumi.get(self, "flow_log_file_format")

    @flow_log_file_format.setter
    def flow_log_file_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_file_format", value)

    @property
    @pulumi.getter
    def flow_log_hive_compatible_partitions(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3
        """
        return pulumi.get(self, "flow_log_hive_compatible_partitions")

    @flow_log_hive_compatible_partitions.setter
    def flow_log_hive_compatible_partitions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flow_log_hive_compatible_partitions", value)

    @property
    @pulumi.getter
    def flow_log_log_format(self) -> Optional[pulumi.Input[str]]:
        """
        The fields to include in the flow log record, in the order in which they should appear
        """
        return pulumi.get(self, "flow_log_log_format")

    @flow_log_log_format.setter
    def flow_log_log_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_log_format", value)

    @property
    @pulumi.getter
    def flow_log_max_aggregation_interval(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. Valid Values: `60` seconds or `600` seconds
        """
        return pulumi.get(self, "flow_log_max_aggregation_interval")

    @flow_log_max_aggregation_interval.setter
    def flow_log_max_aggregation_interval(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "flow_log_max_aggregation_interval", value)

    @property
    @pulumi.getter
    def flow_log_per_hour_partition(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Indicates whether to partition the flow log per hour. This reduces the cost and response time for queries
        """
        return pulumi.get(self, "flow_log_per_hour_partition")

    @flow_log_per_hour_partition.setter
    def flow_log_per_hour_partition(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flow_log_per_hour_partition", value)

    @property
    @pulumi.getter
    def flow_log_traffic_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of traffic to capture. Valid values: ACCEPT, REJECT, ALL
        """
        return pulumi.get(self, "flow_log_traffic_type")

    @flow_log_traffic_type.setter
    def flow_log_traffic_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_log_traffic_type", value)

    @property
    @pulumi.getter
    def igw_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the internet gateway
        """
        return pulumi.get(self, "igw_tags")

    @igw_tags.setter
    def igw_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "igw_tags", value)

    @property
    @pulumi.getter
    def instance_tenancy(self) -> Optional[pulumi.Input[str]]:
        """
        A tenancy option for instances launched into the VPC
        """
        return pulumi.get(self, "instance_tenancy")

    @instance_tenancy.setter
    def instance_tenancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_tenancy", value)

    @property
    @pulumi.getter
    def intra_acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the intra subnets network ACL
        """
        return pulumi.get(self, "intra_acl_tags")

    @intra_acl_tags.setter
    def intra_acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "intra_acl_tags", value)

    @property
    @pulumi.getter
    def intra_dedicated_network_acl(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use dedicated network ACL (not default) and custom rules for intra subnets
        """
        return pulumi.get(self, "intra_dedicated_network_acl")

    @intra_dedicated_network_acl.setter
    def intra_dedicated_network_acl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "intra_dedicated_network_acl", value)

    @property
    @pulumi.getter
    def intra_inbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Intra subnets inbound network ACLs
        """
        return pulumi.get(self, "intra_inbound_acl_rules")

    @intra_inbound_acl_rules.setter
    def intra_inbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "intra_inbound_acl_rules", value)

    @property
    @pulumi.getter
    def intra_outbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Intra subnets outbound network ACLs
        """
        return pulumi.get(self, "intra_outbound_acl_rules")

    @intra_outbound_acl_rules.setter
    def intra_outbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "intra_outbound_acl_rules", value)

    @property
    @pulumi.getter
    def intra_route_table_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the intra route tables
        """
        return pulumi.get(self, "intra_route_table_tags")

    @intra_route_table_tags.setter
    def intra_route_table_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "intra_route_table_tags", value)

    @property
    @pulumi.getter
    def intra_subnet_assign_ipv6_address_on_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        """
        return pulumi.get(self, "intra_subnet_assign_ipv6_address_on_creation")

    @intra_subnet_assign_ipv6_address_on_creation.setter
    def intra_subnet_assign_ipv6_address_on_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "intra_subnet_assign_ipv6_address_on_creation", value)

    @property
    @pulumi.getter
    def intra_subnet_enable_dns64(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        """
        return pulumi.get(self, "intra_subnet_enable_dns64")

    @intra_subnet_enable_dns64.setter
    def intra_subnet_enable_dns64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "intra_subnet_enable_dns64", value)

    @property
    @pulumi.getter
    def intra_subnet_enable_resource_name_dns_a_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        """
        return pulumi.get(self, "intra_subnet_enable_resource_name_dns_a_record_on_launch")

    @intra_subnet_enable_resource_name_dns_a_record_on_launch.setter
    def intra_subnet_enable_resource_name_dns_a_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "intra_subnet_enable_resource_name_dns_a_record_on_launch", value)

    @property
    @pulumi.getter
    def intra_subnet_enable_resource_name_dns_aaaa_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        """
        return pulumi.get(self, "intra_subnet_enable_resource_name_dns_aaaa_record_on_launch")

    @intra_subnet_enable_resource_name_dns_aaaa_record_on_launch.setter
    def intra_subnet_enable_resource_name_dns_aaaa_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "intra_subnet_enable_resource_name_dns_aaaa_record_on_launch", value)

    @property
    @pulumi.getter
    def intra_subnet_ipv6_native(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create an IPv6-only subnet. Default: `false`
        """
        return pulumi.get(self, "intra_subnet_ipv6_native")

    @intra_subnet_ipv6_native.setter
    def intra_subnet_ipv6_native(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "intra_subnet_ipv6_native", value)

    @property
    @pulumi.getter
    def intra_subnet_ipv6_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Assigns IPv6 intra subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        """
        return pulumi.get(self, "intra_subnet_ipv6_prefixes")

    @intra_subnet_ipv6_prefixes.setter
    def intra_subnet_ipv6_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "intra_subnet_ipv6_prefixes", value)

    @property
    @pulumi.getter
    def intra_subnet_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Explicit values to use in the Name tag on intra subnets. If empty, Name tags are generated
        """
        return pulumi.get(self, "intra_subnet_names")

    @intra_subnet_names.setter
    def intra_subnet_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "intra_subnet_names", value)

    @property
    @pulumi.getter
    def intra_subnet_private_dns_hostname_type_on_launch(self) -> Optional[pulumi.Input[str]]:
        """
        The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        """
        return pulumi.get(self, "intra_subnet_private_dns_hostname_type_on_launch")

    @intra_subnet_private_dns_hostname_type_on_launch.setter
    def intra_subnet_private_dns_hostname_type_on_launch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intra_subnet_private_dns_hostname_type_on_launch", value)

    @property
    @pulumi.getter
    def intra_subnet_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Suffix to append to intra subnets name
        """
        return pulumi.get(self, "intra_subnet_suffix")

    @intra_subnet_suffix.setter
    def intra_subnet_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intra_subnet_suffix", value)

    @property
    @pulumi.getter
    def intra_subnet_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the intra subnets
        """
        return pulumi.get(self, "intra_subnet_tags")

    @intra_subnet_tags.setter
    def intra_subnet_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "intra_subnet_tags", value)

    @property
    @pulumi.getter
    def intra_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of intra subnets inside the VPC
        """
        return pulumi.get(self, "intra_subnets")

    @intra_subnets.setter
    def intra_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "intra_subnets", value)

    @property
    @pulumi.getter
    def ipv4_ipam_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR
        """
        return pulumi.get(self, "ipv4_ipam_pool_id")

    @ipv4_ipam_pool_id.setter
    def ipv4_ipam_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_ipam_pool_id", value)

    @property
    @pulumi.getter
    def ipv4_netmask_length(self) -> Optional[pulumi.Input[float]]:
        """
        (Optional) The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id
        """
        return pulumi.get(self, "ipv4_netmask_length")

    @ipv4_netmask_length.setter
    def ipv4_netmask_length(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "ipv4_netmask_length", value)

    @property
    @pulumi.getter
    def ipv6_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6_netmask_length`
        """
        return pulumi.get(self, "ipv6_cidr")

    @ipv6_cidr.setter
    def ipv6_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_cidr", value)

    @property
    @pulumi.getter
    def ipv6_cidr_block_network_border_group(self) -> Optional[pulumi.Input[str]]:
        """
        By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones
        """
        return pulumi.get(self, "ipv6_cidr_block_network_border_group")

    @ipv6_cidr_block_network_border_group.setter
    def ipv6_cidr_block_network_border_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_cidr_block_network_border_group", value)

    @property
    @pulumi.getter
    def ipv6_ipam_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) IPAM Pool ID for a IPv6 pool. Conflicts with `assign_generated_ipv6_cidr_block`
        """
        return pulumi.get(self, "ipv6_ipam_pool_id")

    @ipv6_ipam_pool_id.setter
    def ipv6_ipam_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_ipam_pool_id", value)

    @property
    @pulumi.getter
    def ipv6_netmask_length(self) -> Optional[pulumi.Input[float]]:
        """
        (Optional) Netmask length to request from IPAM Pool. Conflicts with `ipv6_cidr_block`. This can be omitted if IPAM pool as a `allocation_default_netmask_length` set. Valid values: `56`
        """
        return pulumi.get(self, "ipv6_netmask_length")

    @ipv6_netmask_length.setter
    def ipv6_netmask_length(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "ipv6_netmask_length", value)

    @property
    @pulumi.getter
    def manage_default_network_acl(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true to adopt and manage Default Network ACL
        """
        return pulumi.get(self, "manage_default_network_acl")

    @manage_default_network_acl.setter
    def manage_default_network_acl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_default_network_acl", value)

    @property
    @pulumi.getter
    def manage_default_route_table(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true to manage default route table
        """
        return pulumi.get(self, "manage_default_route_table")

    @manage_default_route_table.setter
    def manage_default_route_table(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_default_route_table", value)

    @property
    @pulumi.getter
    def manage_default_security_group(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true to adopt and manage default security group
        """
        return pulumi.get(self, "manage_default_security_group")

    @manage_default_security_group.setter
    def manage_default_security_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_default_security_group", value)

    @property
    @pulumi.getter
    def manage_default_vpc(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true to adopt and manage Default VPC
        """
        return pulumi.get(self, "manage_default_vpc")

    @manage_default_vpc.setter
    def manage_default_vpc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_default_vpc", value)

    @property
    @pulumi.getter
    def map_customer_owned_ip_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The `customer_owned_ipv4_pool` and `outpost_arn` arguments must be specified when set to `true`. Default is `false`
        """
        return pulumi.get(self, "map_customer_owned_ip_on_launch")

    @map_customer_owned_ip_on_launch.setter
    def map_customer_owned_ip_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "map_customer_owned_ip_on_launch", value)

    @property
    @pulumi.getter
    def map_public_ip_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true to indicate that instances launched into the subnet should be assigned a public IP address. Default is `false`
        """
        return pulumi.get(self, "map_public_ip_on_launch")

    @map_public_ip_on_launch.setter
    def map_public_ip_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "map_public_ip_on_launch", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to be used on all the resources as identifier
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat_eip_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the NAT EIP
        """
        return pulumi.get(self, "nat_eip_tags")

    @nat_eip_tags.setter
    def nat_eip_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "nat_eip_tags", value)

    @property
    @pulumi.getter
    def nat_gateway_destination_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        Used to pass a custom destination route for private NAT Gateway. If not specified, the default 0.0.0.0/0 is used as a destination route
        """
        return pulumi.get(self, "nat_gateway_destination_cidr_block")

    @nat_gateway_destination_cidr_block.setter
    def nat_gateway_destination_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_gateway_destination_cidr_block", value)

    @property
    @pulumi.getter
    def nat_gateway_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the NAT gateways
        """
        return pulumi.get(self, "nat_gateway_tags")

    @nat_gateway_tags.setter
    def nat_gateway_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "nat_gateway_tags", value)

    @property
    @pulumi.getter
    def one_nat_gateway_per_az(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true if you want only one NAT Gateway per availability zone. Requires `var.azs` to be set, and the number of `public_subnets` created to be greater than or equal to the number of availability zones specified in `var.azs`
        """
        return pulumi.get(self, "one_nat_gateway_per_az")

    @one_nat_gateway_per_az.setter
    def one_nat_gateway_per_az(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "one_nat_gateway_per_az", value)

    @property
    @pulumi.getter
    def outpost_acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the outpost subnets network ACL
        """
        return pulumi.get(self, "outpost_acl_tags")

    @outpost_acl_tags.setter
    def outpost_acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "outpost_acl_tags", value)

    @property
    @pulumi.getter
    def outpost_arn(self) -> Optional[pulumi.Input[str]]:
        """
        ARN of Outpost you want to create a subnet in
        """
        return pulumi.get(self, "outpost_arn")

    @outpost_arn.setter
    def outpost_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outpost_arn", value)

    @property
    @pulumi.getter
    def outpost_az(self) -> Optional[pulumi.Input[str]]:
        """
        AZ where Outpost is anchored
        """
        return pulumi.get(self, "outpost_az")

    @outpost_az.setter
    def outpost_az(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outpost_az", value)

    @property
    @pulumi.getter
    def outpost_dedicated_network_acl(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use dedicated network ACL (not default) and custom rules for outpost subnets
        """
        return pulumi.get(self, "outpost_dedicated_network_acl")

    @outpost_dedicated_network_acl.setter
    def outpost_dedicated_network_acl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "outpost_dedicated_network_acl", value)

    @property
    @pulumi.getter
    def outpost_inbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Outpost subnets inbound network ACLs
        """
        return pulumi.get(self, "outpost_inbound_acl_rules")

    @outpost_inbound_acl_rules.setter
    def outpost_inbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "outpost_inbound_acl_rules", value)

    @property
    @pulumi.getter
    def outpost_outbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Outpost subnets outbound network ACLs
        """
        return pulumi.get(self, "outpost_outbound_acl_rules")

    @outpost_outbound_acl_rules.setter
    def outpost_outbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "outpost_outbound_acl_rules", value)

    @property
    @pulumi.getter
    def outpost_subnet_assign_ipv6_address_on_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        """
        return pulumi.get(self, "outpost_subnet_assign_ipv6_address_on_creation")

    @outpost_subnet_assign_ipv6_address_on_creation.setter
    def outpost_subnet_assign_ipv6_address_on_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "outpost_subnet_assign_ipv6_address_on_creation", value)

    @property
    @pulumi.getter
    def outpost_subnet_enable_dns64(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        """
        return pulumi.get(self, "outpost_subnet_enable_dns64")

    @outpost_subnet_enable_dns64.setter
    def outpost_subnet_enable_dns64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "outpost_subnet_enable_dns64", value)

    @property
    @pulumi.getter
    def outpost_subnet_enable_resource_name_dns_a_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        """
        return pulumi.get(self, "outpost_subnet_enable_resource_name_dns_a_record_on_launch")

    @outpost_subnet_enable_resource_name_dns_a_record_on_launch.setter
    def outpost_subnet_enable_resource_name_dns_a_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "outpost_subnet_enable_resource_name_dns_a_record_on_launch", value)

    @property
    @pulumi.getter
    def outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        """
        return pulumi.get(self, "outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch")

    @outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch.setter
    def outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch", value)

    @property
    @pulumi.getter
    def outpost_subnet_ipv6_native(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create an IPv6-only subnet. Default: `false`
        """
        return pulumi.get(self, "outpost_subnet_ipv6_native")

    @outpost_subnet_ipv6_native.setter
    def outpost_subnet_ipv6_native(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "outpost_subnet_ipv6_native", value)

    @property
    @pulumi.getter
    def outpost_subnet_ipv6_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Assigns IPv6 outpost subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        """
        return pulumi.get(self, "outpost_subnet_ipv6_prefixes")

    @outpost_subnet_ipv6_prefixes.setter
    def outpost_subnet_ipv6_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "outpost_subnet_ipv6_prefixes", value)

    @property
    @pulumi.getter
    def outpost_subnet_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Explicit values to use in the Name tag on outpost subnets. If empty, Name tags are generated
        """
        return pulumi.get(self, "outpost_subnet_names")

    @outpost_subnet_names.setter
    def outpost_subnet_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "outpost_subnet_names", value)

    @property
    @pulumi.getter
    def outpost_subnet_private_dns_hostname_type_on_launch(self) -> Optional[pulumi.Input[str]]:
        """
        The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        """
        return pulumi.get(self, "outpost_subnet_private_dns_hostname_type_on_launch")

    @outpost_subnet_private_dns_hostname_type_on_launch.setter
    def outpost_subnet_private_dns_hostname_type_on_launch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outpost_subnet_private_dns_hostname_type_on_launch", value)

    @property
    @pulumi.getter
    def outpost_subnet_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Suffix to append to outpost subnets name
        """
        return pulumi.get(self, "outpost_subnet_suffix")

    @outpost_subnet_suffix.setter
    def outpost_subnet_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outpost_subnet_suffix", value)

    @property
    @pulumi.getter
    def outpost_subnet_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the outpost subnets
        """
        return pulumi.get(self, "outpost_subnet_tags")

    @outpost_subnet_tags.setter
    def outpost_subnet_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "outpost_subnet_tags", value)

    @property
    @pulumi.getter
    def outpost_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of outpost subnets inside the VPC
        """
        return pulumi.get(self, "outpost_subnets")

    @outpost_subnets.setter
    def outpost_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "outpost_subnets", value)

    @property
    @pulumi.getter
    def private_acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the private subnets network ACL
        """
        return pulumi.get(self, "private_acl_tags")

    @private_acl_tags.setter
    def private_acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "private_acl_tags", value)

    @property
    @pulumi.getter
    def private_dedicated_network_acl(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use dedicated network ACL (not default) and custom rules for private subnets
        """
        return pulumi.get(self, "private_dedicated_network_acl")

    @private_dedicated_network_acl.setter
    def private_dedicated_network_acl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_dedicated_network_acl", value)

    @property
    @pulumi.getter
    def private_inbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Private subnets inbound network ACLs
        """
        return pulumi.get(self, "private_inbound_acl_rules")

    @private_inbound_acl_rules.setter
    def private_inbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "private_inbound_acl_rules", value)

    @property
    @pulumi.getter
    def private_outbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Private subnets outbound network ACLs
        """
        return pulumi.get(self, "private_outbound_acl_rules")

    @private_outbound_acl_rules.setter
    def private_outbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "private_outbound_acl_rules", value)

    @property
    @pulumi.getter
    def private_route_table_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the private route tables
        """
        return pulumi.get(self, "private_route_table_tags")

    @private_route_table_tags.setter
    def private_route_table_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "private_route_table_tags", value)

    @property
    @pulumi.getter
    def private_subnet_assign_ipv6_address_on_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        """
        return pulumi.get(self, "private_subnet_assign_ipv6_address_on_creation")

    @private_subnet_assign_ipv6_address_on_creation.setter
    def private_subnet_assign_ipv6_address_on_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_subnet_assign_ipv6_address_on_creation", value)

    @property
    @pulumi.getter
    def private_subnet_enable_dns64(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        """
        return pulumi.get(self, "private_subnet_enable_dns64")

    @private_subnet_enable_dns64.setter
    def private_subnet_enable_dns64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_subnet_enable_dns64", value)

    @property
    @pulumi.getter
    def private_subnet_enable_resource_name_dns_a_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        """
        return pulumi.get(self, "private_subnet_enable_resource_name_dns_a_record_on_launch")

    @private_subnet_enable_resource_name_dns_a_record_on_launch.setter
    def private_subnet_enable_resource_name_dns_a_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_subnet_enable_resource_name_dns_a_record_on_launch", value)

    @property
    @pulumi.getter
    def private_subnet_enable_resource_name_dns_aaaa_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        """
        return pulumi.get(self, "private_subnet_enable_resource_name_dns_aaaa_record_on_launch")

    @private_subnet_enable_resource_name_dns_aaaa_record_on_launch.setter
    def private_subnet_enable_resource_name_dns_aaaa_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_subnet_enable_resource_name_dns_aaaa_record_on_launch", value)

    @property
    @pulumi.getter
    def private_subnet_ipv6_native(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create an IPv6-only subnet. Default: `false`
        """
        return pulumi.get(self, "private_subnet_ipv6_native")

    @private_subnet_ipv6_native.setter
    def private_subnet_ipv6_native(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_subnet_ipv6_native", value)

    @property
    @pulumi.getter
    def private_subnet_ipv6_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Assigns IPv6 private subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        """
        return pulumi.get(self, "private_subnet_ipv6_prefixes")

    @private_subnet_ipv6_prefixes.setter
    def private_subnet_ipv6_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_subnet_ipv6_prefixes", value)

    @property
    @pulumi.getter
    def private_subnet_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Explicit values to use in the Name tag on private subnets. If empty, Name tags are generated
        """
        return pulumi.get(self, "private_subnet_names")

    @private_subnet_names.setter
    def private_subnet_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_subnet_names", value)

    @property
    @pulumi.getter
    def private_subnet_private_dns_hostname_type_on_launch(self) -> Optional[pulumi.Input[str]]:
        """
        The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        """
        return pulumi.get(self, "private_subnet_private_dns_hostname_type_on_launch")

    @private_subnet_private_dns_hostname_type_on_launch.setter
    def private_subnet_private_dns_hostname_type_on_launch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_subnet_private_dns_hostname_type_on_launch", value)

    @property
    @pulumi.getter
    def private_subnet_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Suffix to append to private subnets name
        """
        return pulumi.get(self, "private_subnet_suffix")

    @private_subnet_suffix.setter
    def private_subnet_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_subnet_suffix", value)

    @property
    @pulumi.getter
    def private_subnet_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the private subnets
        """
        return pulumi.get(self, "private_subnet_tags")

    @private_subnet_tags.setter
    def private_subnet_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "private_subnet_tags", value)

    @property
    @pulumi.getter
    def private_subnet_tags_per_az(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Additional tags for the private subnets where the primary key is the AZ
        """
        return pulumi.get(self, "private_subnet_tags_per_az")

    @private_subnet_tags_per_az.setter
    def private_subnet_tags_per_az(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "private_subnet_tags_per_az", value)

    @property
    @pulumi.getter
    def private_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of private subnets inside the VPC
        """
        return pulumi.get(self, "private_subnets")

    @private_subnets.setter
    def private_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_subnets", value)

    @property
    @pulumi.getter
    def propagate_intra_route_tables_vgw(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true if you want route table propagation
        """
        return pulumi.get(self, "propagate_intra_route_tables_vgw")

    @propagate_intra_route_tables_vgw.setter
    def propagate_intra_route_tables_vgw(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "propagate_intra_route_tables_vgw", value)

    @property
    @pulumi.getter
    def propagate_private_route_tables_vgw(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true if you want route table propagation
        """
        return pulumi.get(self, "propagate_private_route_tables_vgw")

    @propagate_private_route_tables_vgw.setter
    def propagate_private_route_tables_vgw(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "propagate_private_route_tables_vgw", value)

    @property
    @pulumi.getter
    def propagate_public_route_tables_vgw(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true if you want route table propagation
        """
        return pulumi.get(self, "propagate_public_route_tables_vgw")

    @propagate_public_route_tables_vgw.setter
    def propagate_public_route_tables_vgw(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "propagate_public_route_tables_vgw", value)

    @property
    @pulumi.getter
    def public_acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the public subnets network ACL
        """
        return pulumi.get(self, "public_acl_tags")

    @public_acl_tags.setter
    def public_acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "public_acl_tags", value)

    @property
    @pulumi.getter
    def public_dedicated_network_acl(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use dedicated network ACL (not default) and custom rules for public subnets
        """
        return pulumi.get(self, "public_dedicated_network_acl")

    @public_dedicated_network_acl.setter
    def public_dedicated_network_acl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_dedicated_network_acl", value)

    @property
    @pulumi.getter
    def public_inbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Public subnets inbound network ACLs
        """
        return pulumi.get(self, "public_inbound_acl_rules")

    @public_inbound_acl_rules.setter
    def public_inbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "public_inbound_acl_rules", value)

    @property
    @pulumi.getter
    def public_outbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Public subnets outbound network ACLs
        """
        return pulumi.get(self, "public_outbound_acl_rules")

    @public_outbound_acl_rules.setter
    def public_outbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "public_outbound_acl_rules", value)

    @property
    @pulumi.getter
    def public_route_table_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the public route tables
        """
        return pulumi.get(self, "public_route_table_tags")

    @public_route_table_tags.setter
    def public_route_table_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "public_route_table_tags", value)

    @property
    @pulumi.getter
    def public_subnet_assign_ipv6_address_on_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        """
        return pulumi.get(self, "public_subnet_assign_ipv6_address_on_creation")

    @public_subnet_assign_ipv6_address_on_creation.setter
    def public_subnet_assign_ipv6_address_on_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_subnet_assign_ipv6_address_on_creation", value)

    @property
    @pulumi.getter
    def public_subnet_enable_dns64(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        """
        return pulumi.get(self, "public_subnet_enable_dns64")

    @public_subnet_enable_dns64.setter
    def public_subnet_enable_dns64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_subnet_enable_dns64", value)

    @property
    @pulumi.getter
    def public_subnet_enable_resource_name_dns_a_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        """
        return pulumi.get(self, "public_subnet_enable_resource_name_dns_a_record_on_launch")

    @public_subnet_enable_resource_name_dns_a_record_on_launch.setter
    def public_subnet_enable_resource_name_dns_a_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_subnet_enable_resource_name_dns_a_record_on_launch", value)

    @property
    @pulumi.getter
    def public_subnet_enable_resource_name_dns_aaaa_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        """
        return pulumi.get(self, "public_subnet_enable_resource_name_dns_aaaa_record_on_launch")

    @public_subnet_enable_resource_name_dns_aaaa_record_on_launch.setter
    def public_subnet_enable_resource_name_dns_aaaa_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_subnet_enable_resource_name_dns_aaaa_record_on_launch", value)

    @property
    @pulumi.getter
    def public_subnet_ipv6_native(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create an IPv6-only subnet. Default: `false`
        """
        return pulumi.get(self, "public_subnet_ipv6_native")

    @public_subnet_ipv6_native.setter
    def public_subnet_ipv6_native(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_subnet_ipv6_native", value)

    @property
    @pulumi.getter
    def public_subnet_ipv6_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Assigns IPv6 public subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        """
        return pulumi.get(self, "public_subnet_ipv6_prefixes")

    @public_subnet_ipv6_prefixes.setter
    def public_subnet_ipv6_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_subnet_ipv6_prefixes", value)

    @property
    @pulumi.getter
    def public_subnet_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Explicit values to use in the Name tag on public subnets. If empty, Name tags are generated
        """
        return pulumi.get(self, "public_subnet_names")

    @public_subnet_names.setter
    def public_subnet_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_subnet_names", value)

    @property
    @pulumi.getter
    def public_subnet_private_dns_hostname_type_on_launch(self) -> Optional[pulumi.Input[str]]:
        """
        The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        """
        return pulumi.get(self, "public_subnet_private_dns_hostname_type_on_launch")

    @public_subnet_private_dns_hostname_type_on_launch.setter
    def public_subnet_private_dns_hostname_type_on_launch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_subnet_private_dns_hostname_type_on_launch", value)

    @property
    @pulumi.getter
    def public_subnet_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Suffix to append to public subnets name
        """
        return pulumi.get(self, "public_subnet_suffix")

    @public_subnet_suffix.setter
    def public_subnet_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_subnet_suffix", value)

    @property
    @pulumi.getter
    def public_subnet_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the public subnets
        """
        return pulumi.get(self, "public_subnet_tags")

    @public_subnet_tags.setter
    def public_subnet_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "public_subnet_tags", value)

    @property
    @pulumi.getter
    def public_subnet_tags_per_az(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Additional tags for the public subnets where the primary key is the AZ
        """
        return pulumi.get(self, "public_subnet_tags_per_az")

    @public_subnet_tags_per_az.setter
    def public_subnet_tags_per_az(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "public_subnet_tags_per_az", value)

    @property
    @pulumi.getter
    def public_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of public subnets inside the VPC
        """
        return pulumi.get(self, "public_subnets")

    @public_subnets.setter
    def public_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_subnets", value)

    @property
    @pulumi.getter
    def putin_khuylo(self) -> Optional[pulumi.Input[bool]]:
        """
        Do you agree that Putin doesn't respect Ukrainian sovereignty and territorial integrity? More info: https://en.wikipedia.org/wiki/Putin_khuylo!
        """
        return pulumi.get(self, "putin_khuylo")

    @putin_khuylo.setter
    def putin_khuylo(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "putin_khuylo", value)

    @property
    @pulumi.getter
    def redshift_acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the redshift subnets network ACL
        """
        return pulumi.get(self, "redshift_acl_tags")

    @redshift_acl_tags.setter
    def redshift_acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "redshift_acl_tags", value)

    @property
    @pulumi.getter
    def redshift_dedicated_network_acl(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use dedicated network ACL (not default) and custom rules for redshift subnets
        """
        return pulumi.get(self, "redshift_dedicated_network_acl")

    @redshift_dedicated_network_acl.setter
    def redshift_dedicated_network_acl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redshift_dedicated_network_acl", value)

    @property
    @pulumi.getter
    def redshift_inbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Redshift subnets inbound network ACL rules
        """
        return pulumi.get(self, "redshift_inbound_acl_rules")

    @redshift_inbound_acl_rules.setter
    def redshift_inbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "redshift_inbound_acl_rules", value)

    @property
    @pulumi.getter
    def redshift_outbound_acl_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Redshift subnets outbound network ACL rules
        """
        return pulumi.get(self, "redshift_outbound_acl_rules")

    @redshift_outbound_acl_rules.setter
    def redshift_outbound_acl_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "redshift_outbound_acl_rules", value)

    @property
    @pulumi.getter
    def redshift_route_table_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the redshift route tables
        """
        return pulumi.get(self, "redshift_route_table_tags")

    @redshift_route_table_tags.setter
    def redshift_route_table_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "redshift_route_table_tags", value)

    @property
    @pulumi.getter
    def redshift_subnet_assign_ipv6_address_on_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        """
        return pulumi.get(self, "redshift_subnet_assign_ipv6_address_on_creation")

    @redshift_subnet_assign_ipv6_address_on_creation.setter
    def redshift_subnet_assign_ipv6_address_on_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redshift_subnet_assign_ipv6_address_on_creation", value)

    @property
    @pulumi.getter
    def redshift_subnet_enable_dns64(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        """
        return pulumi.get(self, "redshift_subnet_enable_dns64")

    @redshift_subnet_enable_dns64.setter
    def redshift_subnet_enable_dns64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redshift_subnet_enable_dns64", value)

    @property
    @pulumi.getter
    def redshift_subnet_enable_resource_name_dns_a_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        """
        return pulumi.get(self, "redshift_subnet_enable_resource_name_dns_a_record_on_launch")

    @redshift_subnet_enable_resource_name_dns_a_record_on_launch.setter
    def redshift_subnet_enable_resource_name_dns_a_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redshift_subnet_enable_resource_name_dns_a_record_on_launch", value)

    @property
    @pulumi.getter
    def redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        """
        return pulumi.get(self, "redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch")

    @redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch.setter
    def redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch", value)

    @property
    @pulumi.getter
    def redshift_subnet_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of redshift subnet group
        """
        return pulumi.get(self, "redshift_subnet_group_name")

    @redshift_subnet_group_name.setter
    def redshift_subnet_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redshift_subnet_group_name", value)

    @property
    @pulumi.getter
    def redshift_subnet_group_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the redshift subnet group
        """
        return pulumi.get(self, "redshift_subnet_group_tags")

    @redshift_subnet_group_tags.setter
    def redshift_subnet_group_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "redshift_subnet_group_tags", value)

    @property
    @pulumi.getter
    def redshift_subnet_ipv6_native(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create an IPv6-only subnet. Default: `false`
        """
        return pulumi.get(self, "redshift_subnet_ipv6_native")

    @redshift_subnet_ipv6_native.setter
    def redshift_subnet_ipv6_native(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redshift_subnet_ipv6_native", value)

    @property
    @pulumi.getter
    def redshift_subnet_ipv6_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Assigns IPv6 redshift subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        """
        return pulumi.get(self, "redshift_subnet_ipv6_prefixes")

    @redshift_subnet_ipv6_prefixes.setter
    def redshift_subnet_ipv6_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redshift_subnet_ipv6_prefixes", value)

    @property
    @pulumi.getter
    def redshift_subnet_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Explicit values to use in the Name tag on redshift subnets. If empty, Name tags are generated
        """
        return pulumi.get(self, "redshift_subnet_names")

    @redshift_subnet_names.setter
    def redshift_subnet_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redshift_subnet_names", value)

    @property
    @pulumi.getter
    def redshift_subnet_private_dns_hostname_type_on_launch(self) -> Optional[pulumi.Input[str]]:
        """
        The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        """
        return pulumi.get(self, "redshift_subnet_private_dns_hostname_type_on_launch")

    @redshift_subnet_private_dns_hostname_type_on_launch.setter
    def redshift_subnet_private_dns_hostname_type_on_launch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redshift_subnet_private_dns_hostname_type_on_launch", value)

    @property
    @pulumi.getter
    def redshift_subnet_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Suffix to append to redshift subnets name
        """
        return pulumi.get(self, "redshift_subnet_suffix")

    @redshift_subnet_suffix.setter
    def redshift_subnet_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redshift_subnet_suffix", value)

    @property
    @pulumi.getter
    def redshift_subnet_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the redshift subnets
        """
        return pulumi.get(self, "redshift_subnet_tags")

    @redshift_subnet_tags.setter
    def redshift_subnet_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "redshift_subnet_tags", value)

    @property
    @pulumi.getter
    def redshift_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of redshift subnets inside the VPC
        """
        return pulumi.get(self, "redshift_subnets")

    @redshift_subnets.setter
    def redshift_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redshift_subnets", value)

    @property
    @pulumi.getter
    def reuse_nat_ips(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true if you don't want EIPs to be created for your NAT Gateways and will instead pass them in via the 'external_nat_ip_ids' variable
        """
        return pulumi.get(self, "reuse_nat_ips")

    @reuse_nat_ips.setter
    def reuse_nat_ips(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reuse_nat_ips", value)

    @property
    @pulumi.getter
    def secondary_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of secondary CIDR blocks to associate with the VPC to extend the IP Address pool
        """
        return pulumi.get(self, "secondary_cidr_blocks")

    @secondary_cidr_blocks.setter
    def secondary_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "secondary_cidr_blocks", value)

    @property
    @pulumi.getter
    def single_nat_gateway(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true if you want to provision a single shared NAT Gateway across all of your private networks
        """
        return pulumi.get(self, "single_nat_gateway")

    @single_nat_gateway.setter
    def single_nat_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "single_nat_gateway", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags to add to all resources
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def use_ipam_pool(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether IPAM pool is used for CIDR allocation
        """
        return pulumi.get(self, "use_ipam_pool")

    @use_ipam_pool.setter
    def use_ipam_pool(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ipam_pool", value)

    @property
    @pulumi.getter
    def vpc_flow_log_iam_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the IAM policy
        """
        return pulumi.get(self, "vpc_flow_log_iam_policy_name")

    @vpc_flow_log_iam_policy_name.setter
    def vpc_flow_log_iam_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_flow_log_iam_policy_name", value)

    @property
    @pulumi.getter
    def vpc_flow_log_iam_policy_use_name_prefix(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the name of the IAM policy (`vpc_flow_log_iam_policy_name`) is used as a prefix
        """
        return pulumi.get(self, "vpc_flow_log_iam_policy_use_name_prefix")

    @vpc_flow_log_iam_policy_use_name_prefix.setter
    def vpc_flow_log_iam_policy_use_name_prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vpc_flow_log_iam_policy_use_name_prefix", value)

    @property
    @pulumi.getter
    def vpc_flow_log_iam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to use on the VPC Flow Log IAM role created
        """
        return pulumi.get(self, "vpc_flow_log_iam_role_name")

    @vpc_flow_log_iam_role_name.setter
    def vpc_flow_log_iam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_flow_log_iam_role_name", value)

    @property
    @pulumi.getter
    def vpc_flow_log_iam_role_use_name_prefix(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the IAM role name (`vpc_flow_log_iam_role_name_name`) is used as a prefix
        """
        return pulumi.get(self, "vpc_flow_log_iam_role_use_name_prefix")

    @vpc_flow_log_iam_role_use_name_prefix.setter
    def vpc_flow_log_iam_role_use_name_prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vpc_flow_log_iam_role_use_name_prefix", value)

    @property
    @pulumi.getter
    def vpc_flow_log_permissions_boundary(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the Permissions Boundary for the VPC Flow Log IAM Role
        """
        return pulumi.get(self, "vpc_flow_log_permissions_boundary")

    @vpc_flow_log_permissions_boundary.setter
    def vpc_flow_log_permissions_boundary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_flow_log_permissions_boundary", value)

    @property
    @pulumi.getter
    def vpc_flow_log_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the VPC Flow Logs
        """
        return pulumi.get(self, "vpc_flow_log_tags")

    @vpc_flow_log_tags.setter
    def vpc_flow_log_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vpc_flow_log_tags", value)

    @property
    @pulumi.getter
    def vpc_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the VPC
        """
        return pulumi.get(self, "vpc_tags")

    @vpc_tags.setter
    def vpc_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vpc_tags", value)

    @property
    @pulumi.getter
    def vpn_gateway_az(self) -> Optional[pulumi.Input[str]]:
        """
        The Availability Zone for the VPN Gateway
        """
        return pulumi.get(self, "vpn_gateway_az")

    @vpn_gateway_az.setter
    def vpn_gateway_az(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_gateway_az", value)

    @property
    @pulumi.getter
    def vpn_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPN Gateway to attach to the VPC
        """
        return pulumi.get(self, "vpn_gateway_id")

    @vpn_gateway_id.setter
    def vpn_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_gateway_id", value)

    @property
    @pulumi.getter
    def vpn_gateway_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional tags for the VPN gateway
        """
        return pulumi.get(self, "vpn_gateway_tags")

    @vpn_gateway_tags.setter
    def vpn_gateway_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vpn_gateway_tags", value)


class Vpc(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 amazon_side_asn: Optional[pulumi.Input[str]] = None,
                 azs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 create_database_internet_gateway_route: Optional[pulumi.Input[bool]] = None,
                 create_database_nat_gateway_route: Optional[pulumi.Input[bool]] = None,
                 create_database_subnet_group: Optional[pulumi.Input[bool]] = None,
                 create_database_subnet_route_table: Optional[pulumi.Input[bool]] = None,
                 create_egress_only_igw: Optional[pulumi.Input[bool]] = None,
                 create_elasticache_subnet_group: Optional[pulumi.Input[bool]] = None,
                 create_elasticache_subnet_route_table: Optional[pulumi.Input[bool]] = None,
                 create_flow_log_cloudwatch_iam_role: Optional[pulumi.Input[bool]] = None,
                 create_flow_log_cloudwatch_log_group: Optional[pulumi.Input[bool]] = None,
                 create_igw: Optional[pulumi.Input[bool]] = None,
                 create_multiple_intra_route_tables: Optional[pulumi.Input[bool]] = None,
                 create_multiple_public_route_tables: Optional[pulumi.Input[bool]] = None,
                 create_private_nat_gateway_route: Optional[pulumi.Input[bool]] = None,
                 create_redshift_subnet_group: Optional[pulumi.Input[bool]] = None,
                 create_redshift_subnet_route_table: Optional[pulumi.Input[bool]] = None,
                 create_vpc: Optional[pulumi.Input[bool]] = None,
                 customer_gateway_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 customer_gateways: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 customer_owned_ipv4_pool: Optional[pulumi.Input[str]] = None,
                 database_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 database_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 database_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 database_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 database_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 database_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 database_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 database_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 database_subnet_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 database_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 database_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 database_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 database_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 database_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_network_acl_egress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_network_acl_ingress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_network_acl_name: Optional[pulumi.Input[str]] = None,
                 default_network_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 default_route_table_name: Optional[pulumi.Input[str]] = None,
                 default_route_table_propagating_vgws: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_route_table_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 default_security_group_egress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_security_group_ingress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_security_group_name: Optional[pulumi.Input[str]] = None,
                 default_security_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 default_vpc_enable_dns_hostnames: Optional[pulumi.Input[bool]] = None,
                 default_vpc_enable_dns_support: Optional[pulumi.Input[bool]] = None,
                 default_vpc_name: Optional[pulumi.Input[str]] = None,
                 default_vpc_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dhcp_options_domain_name: Optional[pulumi.Input[str]] = None,
                 dhcp_options_domain_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_options_ipv6_address_preferred_lease_time: Optional[pulumi.Input[float]] = None,
                 dhcp_options_netbios_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_options_netbios_node_type: Optional[pulumi.Input[str]] = None,
                 dhcp_options_ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_options_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 elasticache_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 elasticache_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 elasticache_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 elasticache_subnet_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticache_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticache_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 elasticache_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 elasticache_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_dhcp_options: Optional[pulumi.Input[bool]] = None,
                 enable_dns_hostnames: Optional[pulumi.Input[bool]] = None,
                 enable_dns_support: Optional[pulumi.Input[bool]] = None,
                 enable_flow_log: Optional[pulumi.Input[bool]] = None,
                 enable_ipv6: Optional[pulumi.Input[bool]] = None,
                 enable_nat_gateway: Optional[pulumi.Input[bool]] = None,
                 enable_network_address_usage_metrics: Optional[pulumi.Input[bool]] = None,
                 enable_public_redshift: Optional[pulumi.Input[bool]] = None,
                 enable_vpn_gateway: Optional[pulumi.Input[bool]] = None,
                 external_nat_ip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_nat_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 flow_log_cloudwatch_iam_role_arn: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_iam_role_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowLogCloudwatchIamRoleConditionsArgs']]]]] = None,
                 flow_log_cloudwatch_log_group_class: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_kms_key_id: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_name_prefix: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_name_suffix: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_retention_in_days: Optional[pulumi.Input[float]] = None,
                 flow_log_cloudwatch_log_group_skip_destroy: Optional[pulumi.Input[bool]] = None,
                 flow_log_deliver_cross_account_role: Optional[pulumi.Input[str]] = None,
                 flow_log_destination_arn: Optional[pulumi.Input[str]] = None,
                 flow_log_destination_type: Optional[pulumi.Input[str]] = None,
                 flow_log_file_format: Optional[pulumi.Input[str]] = None,
                 flow_log_hive_compatible_partitions: Optional[pulumi.Input[bool]] = None,
                 flow_log_log_format: Optional[pulumi.Input[str]] = None,
                 flow_log_max_aggregation_interval: Optional[pulumi.Input[float]] = None,
                 flow_log_per_hour_partition: Optional[pulumi.Input[bool]] = None,
                 flow_log_traffic_type: Optional[pulumi.Input[str]] = None,
                 igw_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 instance_tenancy: Optional[pulumi.Input[str]] = None,
                 intra_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 intra_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 intra_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 intra_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 intra_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 intra_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 intra_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 intra_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 intra_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 intra_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 intra_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv4_ipam_pool_id: Optional[pulumi.Input[str]] = None,
                 ipv4_netmask_length: Optional[pulumi.Input[float]] = None,
                 ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 ipv6_cidr_block_network_border_group: Optional[pulumi.Input[str]] = None,
                 ipv6_ipam_pool_id: Optional[pulumi.Input[str]] = None,
                 ipv6_netmask_length: Optional[pulumi.Input[float]] = None,
                 manage_default_network_acl: Optional[pulumi.Input[bool]] = None,
                 manage_default_route_table: Optional[pulumi.Input[bool]] = None,
                 manage_default_security_group: Optional[pulumi.Input[bool]] = None,
                 manage_default_vpc: Optional[pulumi.Input[bool]] = None,
                 map_customer_owned_ip_on_launch: Optional[pulumi.Input[bool]] = None,
                 map_public_ip_on_launch: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_eip_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 nat_gateway_destination_cidr_block: Optional[pulumi.Input[str]] = None,
                 nat_gateway_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 one_nat_gateway_per_az: Optional[pulumi.Input[bool]] = None,
                 outpost_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 outpost_arn: Optional[pulumi.Input[str]] = None,
                 outpost_az: Optional[pulumi.Input[str]] = None,
                 outpost_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 outpost_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 outpost_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 outpost_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outpost_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outpost_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 outpost_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 outpost_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 outpost_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 private_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 private_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 private_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 private_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 private_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 private_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 private_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 private_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 private_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 private_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 private_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 private_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 private_subnet_tags_per_az: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 private_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 propagate_intra_route_tables_vgw: Optional[pulumi.Input[bool]] = None,
                 propagate_private_route_tables_vgw: Optional[pulumi.Input[bool]] = None,
                 propagate_public_route_tables_vgw: Optional[pulumi.Input[bool]] = None,
                 public_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 public_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 public_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 public_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 public_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 public_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 public_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 public_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 public_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 public_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 public_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 public_subnet_tags_per_az: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 putin_khuylo: Optional[pulumi.Input[bool]] = None,
                 redshift_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 redshift_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 redshift_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 redshift_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 redshift_subnet_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redshift_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redshift_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 redshift_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 redshift_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reuse_nat_ips: Optional[pulumi.Input[bool]] = None,
                 secondary_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 single_nat_gateway: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 use_ipam_pool: Optional[pulumi.Input[bool]] = None,
                 vpc_flow_log_iam_policy_name: Optional[pulumi.Input[str]] = None,
                 vpc_flow_log_iam_policy_use_name_prefix: Optional[pulumi.Input[bool]] = None,
                 vpc_flow_log_iam_role_name: Optional[pulumi.Input[str]] = None,
                 vpc_flow_log_iam_role_use_name_prefix: Optional[pulumi.Input[bool]] = None,
                 vpc_flow_log_permissions_boundary: Optional[pulumi.Input[str]] = None,
                 vpc_flow_log_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpn_gateway_az: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_id: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] amazon_side_asn: The Autonomous System Number (ASN) for the Amazon side of the gateway. By default the virtual private gateway is created with the current default Amazon ASN
        :param pulumi.Input[Sequence[pulumi.Input[str]]] azs: A list of availability zones names or ids in the region
        :param pulumi.Input[str] cidr: (Optional) The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using `ipv4_netmask_length` & `ipv4_ipam_pool_id`
        :param pulumi.Input[bool] create_database_internet_gateway_route: Controls if an internet gateway route for public database access should be created
        :param pulumi.Input[bool] create_database_nat_gateway_route: Controls if a nat gateway route should be created to give internet access to the database subnets
        :param pulumi.Input[bool] create_database_subnet_group: Controls if database subnet group should be created (n.b. database_subnets must also be set)
        :param pulumi.Input[bool] create_database_subnet_route_table: Controls if separate route table for database should be created
        :param pulumi.Input[bool] create_egress_only_igw: Controls if an Egress Only Internet Gateway is created and its related routes
        :param pulumi.Input[bool] create_elasticache_subnet_group: Controls if elasticache subnet group should be created
        :param pulumi.Input[bool] create_elasticache_subnet_route_table: Controls if separate route table for elasticache should be created
        :param pulumi.Input[bool] create_flow_log_cloudwatch_iam_role: Whether to create IAM role for VPC Flow Logs
        :param pulumi.Input[bool] create_flow_log_cloudwatch_log_group: Whether to create CloudWatch log group for VPC Flow Logs
        :param pulumi.Input[bool] create_igw: Controls if an Internet Gateway is created for public subnets and the related routes that connect them
        :param pulumi.Input[bool] create_multiple_intra_route_tables: Indicates whether to create a separate route table for each intra subnet. Default: `false`
        :param pulumi.Input[bool] create_multiple_public_route_tables: Indicates whether to create a separate route table for each public subnet. Default: `false`
        :param pulumi.Input[bool] create_private_nat_gateway_route: Controls if a nat gateway route should be created to give internet access to the private subnets
        :param pulumi.Input[bool] create_redshift_subnet_group: Controls if redshift subnet group should be created
        :param pulumi.Input[bool] create_redshift_subnet_route_table: Controls if separate route table for redshift should be created
        :param pulumi.Input[bool] create_vpc: Controls if VPC should be created (it affects almost all resources)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] customer_gateway_tags: Additional tags for the Customer Gateway
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] customer_gateways: Maps of Customer Gateway's attributes (BGP ASN and Gateway's Internet-routable external IP address)
        :param pulumi.Input[str] customer_owned_ipv4_pool: The customer owned IPv4 address pool. Typically used with the `map_customer_owned_ip_on_launch` argument. The `outpost_arn` argument must be specified when configured
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_acl_tags: Additional tags for the database subnets network ACL
        :param pulumi.Input[bool] database_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for database subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] database_inbound_acl_rules: Database subnets inbound network ACL rules
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] database_outbound_acl_rules: Database subnets outbound network ACL rules
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_route_table_tags: Additional tags for the database route tables
        :param pulumi.Input[bool] database_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] database_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] database_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] database_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[str] database_subnet_group_name: Name of database subnet group
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_subnet_group_tags: Additional tags for the database subnet group
        :param pulumi.Input[bool] database_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] database_subnet_ipv6_prefixes: Assigns IPv6 database subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] database_subnet_names: Explicit values to use in the Name tag on database subnets. If empty, Name tags are generated
        :param pulumi.Input[str] database_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] database_subnet_suffix: Suffix to append to database subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] database_subnet_tags: Additional tags for the database subnets
        :param pulumi.Input[Sequence[pulumi.Input[str]]] database_subnets: A list of database subnets inside the VPC
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] default_network_acl_egress: List of maps of egress rules to set on the Default Network ACL
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] default_network_acl_ingress: List of maps of ingress rules to set on the Default Network ACL
        :param pulumi.Input[str] default_network_acl_name: Name to be used on the Default Network ACL
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] default_network_acl_tags: Additional tags for the Default Network ACL
        :param pulumi.Input[str] default_route_table_name: Name to be used on the default route table
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_route_table_propagating_vgws: List of virtual gateways for propagation
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] default_route_table_routes: Configuration block of routes. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_route_table#route
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] default_route_table_tags: Additional tags for the default route table
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] default_security_group_egress: List of maps of egress rules to set on the default security group
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] default_security_group_ingress: List of maps of ingress rules to set on the default security group
        :param pulumi.Input[str] default_security_group_name: Name to be used on the default security group
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] default_security_group_tags: Additional tags for the default security group
        :param pulumi.Input[bool] default_vpc_enable_dns_hostnames: Should be true to enable DNS hostnames in the Default VPC
        :param pulumi.Input[bool] default_vpc_enable_dns_support: Should be true to enable DNS support in the Default VPC
        :param pulumi.Input[str] default_vpc_name: Name to be used on the Default VPC
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] default_vpc_tags: Additional tags for the Default VPC
        :param pulumi.Input[str] dhcp_options_domain_name: Specifies DNS name for DHCP options set (requires enable_dhcp_options set to true)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dhcp_options_domain_name_servers: Specify a list of DNS server addresses for DHCP options set, default to AWS provided (requires enable_dhcp_options set to true)
        :param pulumi.Input[float] dhcp_options_ipv6_address_preferred_lease_time: How frequently, in seconds, a running instance with an IPv6 assigned to it goes through DHCPv6 lease renewal (requires enable_dhcp_options set to true)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dhcp_options_netbios_name_servers: Specify a list of netbios servers for DHCP options set (requires enable_dhcp_options set to true)
        :param pulumi.Input[str] dhcp_options_netbios_node_type: Specify netbios node_type for DHCP options set (requires enable_dhcp_options set to true)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dhcp_options_ntp_servers: Specify a list of NTP servers for DHCP options set (requires enable_dhcp_options set to true)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] dhcp_options_tags: Additional tags for the DHCP option set (requires enable_dhcp_options set to true)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] elasticache_acl_tags: Additional tags for the elasticache subnets network ACL
        :param pulumi.Input[bool] elasticache_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for elasticache subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] elasticache_inbound_acl_rules: Elasticache subnets inbound network ACL rules
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] elasticache_outbound_acl_rules: Elasticache subnets outbound network ACL rules
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] elasticache_route_table_tags: Additional tags for the elasticache route tables
        :param pulumi.Input[bool] elasticache_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] elasticache_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] elasticache_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[str] elasticache_subnet_group_name: Name of elasticache subnet group
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] elasticache_subnet_group_tags: Additional tags for the elasticache subnet group
        :param pulumi.Input[bool] elasticache_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticache_subnet_ipv6_prefixes: Assigns IPv6 elasticache subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticache_subnet_names: Explicit values to use in the Name tag on elasticache subnets. If empty, Name tags are generated
        :param pulumi.Input[str] elasticache_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] elasticache_subnet_suffix: Suffix to append to elasticache subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] elasticache_subnet_tags: Additional tags for the elasticache subnets
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elasticache_subnets: A list of elasticache subnets inside the VPC
        :param pulumi.Input[bool] enable_dhcp_options: Should be true if you want to specify a DHCP options set with a custom domain name, DNS servers, NTP servers, netbios servers, and/or netbios server type
        :param pulumi.Input[bool] enable_dns_hostnames: Should be true to enable DNS hostnames in the VPC
        :param pulumi.Input[bool] enable_dns_support: Should be true to enable DNS support in the VPC
        :param pulumi.Input[bool] enable_flow_log: Whether or not to enable VPC Flow Logs
        :param pulumi.Input[bool] enable_ipv6: Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block
        :param pulumi.Input[bool] enable_nat_gateway: Should be true if you want to provision NAT Gateways for each of your private networks
        :param pulumi.Input[bool] enable_network_address_usage_metrics: Determines whether network address usage metrics are enabled for the VPC
        :param pulumi.Input[bool] enable_public_redshift: Controls if redshift should have public routing table
        :param pulumi.Input[bool] enable_vpn_gateway: Should be true if you want to create a new VPN Gateway resource and attach it to the VPC
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_nat_ip_ids: List of EIP IDs to be assigned to the NAT Gateways (used in combination with reuse_nat_ips)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_nat_ips: List of EIPs to be used for `nat_public_ips` output (used in combination with reuse_nat_ips and external_nat_ip_ids)
        :param pulumi.Input[str] flow_log_cloudwatch_iam_role_arn: The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group. When flow_log_destination_arn is set to ARN of Cloudwatch Logs, this argument needs to be provided
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowLogCloudwatchIamRoleConditionsArgs']]]] flow_log_cloudwatch_iam_role_conditions: Additional conditions of the CloudWatch role assumption policy
        :param pulumi.Input[str] flow_log_cloudwatch_log_group_class: Specified the log class of the log group. Possible values are: STANDARD or INFREQUENT_ACCESS
        :param pulumi.Input[str] flow_log_cloudwatch_log_group_kms_key_id: The ARN of the KMS Key to use when encrypting log data for VPC flow logs
        :param pulumi.Input[str] flow_log_cloudwatch_log_group_name_prefix: Specifies the name prefix of CloudWatch Log Group for VPC flow logs
        :param pulumi.Input[str] flow_log_cloudwatch_log_group_name_suffix: Specifies the name suffix of CloudWatch Log Group for VPC flow logs
        :param pulumi.Input[float] flow_log_cloudwatch_log_group_retention_in_days: Specifies the number of days you want to retain log events in the specified log group for VPC flow logs
        :param pulumi.Input[bool] flow_log_cloudwatch_log_group_skip_destroy:  Set to true if you do not wish the log group (and any logs it may contain) to be deleted at destroy time, and instead just remove the log group from the Terraform state
        :param pulumi.Input[str] flow_log_deliver_cross_account_role: (Optional) ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
        :param pulumi.Input[str] flow_log_destination_arn: The ARN of the CloudWatch log group or S3 bucket where VPC Flow Logs will be pushed. If this ARN is a S3 bucket the appropriate permissions need to be set on that bucket's policy. When create_flow_log_cloudwatch_log_group is set to false this argument must be provided
        :param pulumi.Input[str] flow_log_destination_type: Type of flow log destination. Can be s3, kinesis-data-firehose or cloud-watch-logs
        :param pulumi.Input[str] flow_log_file_format: (Optional) The format for the flow log. Valid values: `plain-text`, `parquet`
        :param pulumi.Input[bool] flow_log_hive_compatible_partitions: (Optional) Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3
        :param pulumi.Input[str] flow_log_log_format: The fields to include in the flow log record, in the order in which they should appear
        :param pulumi.Input[float] flow_log_max_aggregation_interval: The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. Valid Values: `60` seconds or `600` seconds
        :param pulumi.Input[bool] flow_log_per_hour_partition: (Optional) Indicates whether to partition the flow log per hour. This reduces the cost and response time for queries
        :param pulumi.Input[str] flow_log_traffic_type: The type of traffic to capture. Valid values: ACCEPT, REJECT, ALL
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] igw_tags: Additional tags for the internet gateway
        :param pulumi.Input[str] instance_tenancy: A tenancy option for instances launched into the VPC
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] intra_acl_tags: Additional tags for the intra subnets network ACL
        :param pulumi.Input[bool] intra_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for intra subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] intra_inbound_acl_rules: Intra subnets inbound network ACLs
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] intra_outbound_acl_rules: Intra subnets outbound network ACLs
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] intra_route_table_tags: Additional tags for the intra route tables
        :param pulumi.Input[bool] intra_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] intra_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] intra_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] intra_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[bool] intra_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] intra_subnet_ipv6_prefixes: Assigns IPv6 intra subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] intra_subnet_names: Explicit values to use in the Name tag on intra subnets. If empty, Name tags are generated
        :param pulumi.Input[str] intra_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] intra_subnet_suffix: Suffix to append to intra subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] intra_subnet_tags: Additional tags for the intra subnets
        :param pulumi.Input[Sequence[pulumi.Input[str]]] intra_subnets: A list of intra subnets inside the VPC
        :param pulumi.Input[str] ipv4_ipam_pool_id: (Optional) The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR
        :param pulumi.Input[float] ipv4_netmask_length: (Optional) The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id
        :param pulumi.Input[str] ipv6_cidr: (Optional) IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using `ipv6_netmask_length`
        :param pulumi.Input[str] ipv6_cidr_block_network_border_group: By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones
        :param pulumi.Input[str] ipv6_ipam_pool_id: (Optional) IPAM Pool ID for a IPv6 pool. Conflicts with `assign_generated_ipv6_cidr_block`
        :param pulumi.Input[float] ipv6_netmask_length: (Optional) Netmask length to request from IPAM Pool. Conflicts with `ipv6_cidr_block`. This can be omitted if IPAM pool as a `allocation_default_netmask_length` set. Valid values: `56`
        :param pulumi.Input[bool] manage_default_network_acl: Should be true to adopt and manage Default Network ACL
        :param pulumi.Input[bool] manage_default_route_table: Should be true to manage default route table
        :param pulumi.Input[bool] manage_default_security_group: Should be true to adopt and manage default security group
        :param pulumi.Input[bool] manage_default_vpc: Should be true to adopt and manage Default VPC
        :param pulumi.Input[bool] map_customer_owned_ip_on_launch: Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The `customer_owned_ipv4_pool` and `outpost_arn` arguments must be specified when set to `true`. Default is `false`
        :param pulumi.Input[bool] map_public_ip_on_launch: Specify true to indicate that instances launched into the subnet should be assigned a public IP address. Default is `false`
        :param pulumi.Input[str] name: Name to be used on all the resources as identifier
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] nat_eip_tags: Additional tags for the NAT EIP
        :param pulumi.Input[str] nat_gateway_destination_cidr_block: Used to pass a custom destination route for private NAT Gateway. If not specified, the default 0.0.0.0/0 is used as a destination route
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] nat_gateway_tags: Additional tags for the NAT gateways
        :param pulumi.Input[bool] one_nat_gateway_per_az: Should be true if you want only one NAT Gateway per availability zone. Requires `var.azs` to be set, and the number of `public_subnets` created to be greater than or equal to the number of availability zones specified in `var.azs`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] outpost_acl_tags: Additional tags for the outpost subnets network ACL
        :param pulumi.Input[str] outpost_arn: ARN of Outpost you want to create a subnet in
        :param pulumi.Input[str] outpost_az: AZ where Outpost is anchored
        :param pulumi.Input[bool] outpost_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for outpost subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] outpost_inbound_acl_rules: Outpost subnets inbound network ACLs
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] outpost_outbound_acl_rules: Outpost subnets outbound network ACLs
        :param pulumi.Input[bool] outpost_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] outpost_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] outpost_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[bool] outpost_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outpost_subnet_ipv6_prefixes: Assigns IPv6 outpost subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outpost_subnet_names: Explicit values to use in the Name tag on outpost subnets. If empty, Name tags are generated
        :param pulumi.Input[str] outpost_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] outpost_subnet_suffix: Suffix to append to outpost subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] outpost_subnet_tags: Additional tags for the outpost subnets
        :param pulumi.Input[Sequence[pulumi.Input[str]]] outpost_subnets: A list of outpost subnets inside the VPC
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] private_acl_tags: Additional tags for the private subnets network ACL
        :param pulumi.Input[bool] private_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for private subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] private_inbound_acl_rules: Private subnets inbound network ACLs
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] private_outbound_acl_rules: Private subnets outbound network ACLs
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] private_route_table_tags: Additional tags for the private route tables
        :param pulumi.Input[bool] private_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] private_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] private_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] private_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[bool] private_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_subnet_ipv6_prefixes: Assigns IPv6 private subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_subnet_names: Explicit values to use in the Name tag on private subnets. If empty, Name tags are generated
        :param pulumi.Input[str] private_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] private_subnet_suffix: Suffix to append to private subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] private_subnet_tags: Additional tags for the private subnets
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] private_subnet_tags_per_az: Additional tags for the private subnets where the primary key is the AZ
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_subnets: A list of private subnets inside the VPC
        :param pulumi.Input[bool] propagate_intra_route_tables_vgw: Should be true if you want route table propagation
        :param pulumi.Input[bool] propagate_private_route_tables_vgw: Should be true if you want route table propagation
        :param pulumi.Input[bool] propagate_public_route_tables_vgw: Should be true if you want route table propagation
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] public_acl_tags: Additional tags for the public subnets network ACL
        :param pulumi.Input[bool] public_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for public subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] public_inbound_acl_rules: Public subnets inbound network ACLs
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] public_outbound_acl_rules: Public subnets outbound network ACLs
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] public_route_table_tags: Additional tags for the public route tables
        :param pulumi.Input[bool] public_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] public_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] public_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] public_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[bool] public_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_subnet_ipv6_prefixes: Assigns IPv6 public subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_subnet_names: Explicit values to use in the Name tag on public subnets. If empty, Name tags are generated
        :param pulumi.Input[str] public_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] public_subnet_suffix: Suffix to append to public subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] public_subnet_tags: Additional tags for the public subnets
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] public_subnet_tags_per_az: Additional tags for the public subnets where the primary key is the AZ
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_subnets: A list of public subnets inside the VPC
        :param pulumi.Input[bool] putin_khuylo: Do you agree that Putin doesn't respect Ukrainian sovereignty and territorial integrity? More info: https://en.wikipedia.org/wiki/Putin_khuylo!
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] redshift_acl_tags: Additional tags for the redshift subnets network ACL
        :param pulumi.Input[bool] redshift_dedicated_network_acl: Whether to use dedicated network ACL (not default) and custom rules for redshift subnets
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] redshift_inbound_acl_rules: Redshift subnets inbound network ACL rules
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] redshift_outbound_acl_rules: Redshift subnets outbound network ACL rules
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] redshift_route_table_tags: Additional tags for the redshift route tables
        :param pulumi.Input[bool] redshift_subnet_assign_ipv6_address_on_creation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is `false`
        :param pulumi.Input[bool] redshift_subnet_enable_dns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: `true`
        :param pulumi.Input[bool] redshift_subnet_enable_resource_name_dns_a_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: `false`
        :param pulumi.Input[bool] redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: `true`
        :param pulumi.Input[str] redshift_subnet_group_name: Name of redshift subnet group
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] redshift_subnet_group_tags: Additional tags for the redshift subnet group
        :param pulumi.Input[bool] redshift_subnet_ipv6_native: Indicates whether to create an IPv6-only subnet. Default: `false`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redshift_subnet_ipv6_prefixes: Assigns IPv6 redshift subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redshift_subnet_names: Explicit values to use in the Name tag on redshift subnets. If empty, Name tags are generated
        :param pulumi.Input[str] redshift_subnet_private_dns_hostname_type_on_launch: The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: `ip-name`, `resource-name`
        :param pulumi.Input[str] redshift_subnet_suffix: Suffix to append to redshift subnets name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] redshift_subnet_tags: Additional tags for the redshift subnets
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redshift_subnets: A list of redshift subnets inside the VPC
        :param pulumi.Input[bool] reuse_nat_ips: Should be true if you don't want EIPs to be created for your NAT Gateways and will instead pass them in via the 'external_nat_ip_ids' variable
        :param pulumi.Input[Sequence[pulumi.Input[str]]] secondary_cidr_blocks: List of secondary CIDR blocks to associate with the VPC to extend the IP Address pool
        :param pulumi.Input[bool] single_nat_gateway: Should be true if you want to provision a single shared NAT Gateway across all of your private networks
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to add to all resources
        :param pulumi.Input[bool] use_ipam_pool: Determines whether IPAM pool is used for CIDR allocation
        :param pulumi.Input[str] vpc_flow_log_iam_policy_name: Name of the IAM policy
        :param pulumi.Input[bool] vpc_flow_log_iam_policy_use_name_prefix: Determines whether the name of the IAM policy (`vpc_flow_log_iam_policy_name`) is used as a prefix
        :param pulumi.Input[str] vpc_flow_log_iam_role_name: Name to use on the VPC Flow Log IAM role created
        :param pulumi.Input[bool] vpc_flow_log_iam_role_use_name_prefix: Determines whether the IAM role name (`vpc_flow_log_iam_role_name_name`) is used as a prefix
        :param pulumi.Input[str] vpc_flow_log_permissions_boundary: The ARN of the Permissions Boundary for the VPC Flow Log IAM Role
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vpc_flow_log_tags: Additional tags for the VPC Flow Logs
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vpc_tags: Additional tags for the VPC
        :param pulumi.Input[str] vpn_gateway_az: The Availability Zone for the VPN Gateway
        :param pulumi.Input[str] vpn_gateway_id: ID of VPN Gateway to attach to the VPC
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vpn_gateway_tags: Additional tags for the VPN gateway
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VpcArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 amazon_side_asn: Optional[pulumi.Input[str]] = None,
                 azs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 create_database_internet_gateway_route: Optional[pulumi.Input[bool]] = None,
                 create_database_nat_gateway_route: Optional[pulumi.Input[bool]] = None,
                 create_database_subnet_group: Optional[pulumi.Input[bool]] = None,
                 create_database_subnet_route_table: Optional[pulumi.Input[bool]] = None,
                 create_egress_only_igw: Optional[pulumi.Input[bool]] = None,
                 create_elasticache_subnet_group: Optional[pulumi.Input[bool]] = None,
                 create_elasticache_subnet_route_table: Optional[pulumi.Input[bool]] = None,
                 create_flow_log_cloudwatch_iam_role: Optional[pulumi.Input[bool]] = None,
                 create_flow_log_cloudwatch_log_group: Optional[pulumi.Input[bool]] = None,
                 create_igw: Optional[pulumi.Input[bool]] = None,
                 create_multiple_intra_route_tables: Optional[pulumi.Input[bool]] = None,
                 create_multiple_public_route_tables: Optional[pulumi.Input[bool]] = None,
                 create_private_nat_gateway_route: Optional[pulumi.Input[bool]] = None,
                 create_redshift_subnet_group: Optional[pulumi.Input[bool]] = None,
                 create_redshift_subnet_route_table: Optional[pulumi.Input[bool]] = None,
                 create_vpc: Optional[pulumi.Input[bool]] = None,
                 customer_gateway_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 customer_gateways: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 customer_owned_ipv4_pool: Optional[pulumi.Input[str]] = None,
                 database_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 database_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 database_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 database_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 database_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 database_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 database_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 database_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 database_subnet_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 database_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 database_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 database_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 database_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 database_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 database_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_network_acl_egress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_network_acl_ingress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_network_acl_name: Optional[pulumi.Input[str]] = None,
                 default_network_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 default_route_table_name: Optional[pulumi.Input[str]] = None,
                 default_route_table_propagating_vgws: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_route_table_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 default_security_group_egress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_security_group_ingress: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 default_security_group_name: Optional[pulumi.Input[str]] = None,
                 default_security_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 default_vpc_enable_dns_hostnames: Optional[pulumi.Input[bool]] = None,
                 default_vpc_enable_dns_support: Optional[pulumi.Input[bool]] = None,
                 default_vpc_name: Optional[pulumi.Input[str]] = None,
                 default_vpc_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dhcp_options_domain_name: Optional[pulumi.Input[str]] = None,
                 dhcp_options_domain_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_options_ipv6_address_preferred_lease_time: Optional[pulumi.Input[float]] = None,
                 dhcp_options_netbios_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_options_netbios_node_type: Optional[pulumi.Input[str]] = None,
                 dhcp_options_ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_options_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 elasticache_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 elasticache_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 elasticache_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 elasticache_subnet_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 elasticache_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticache_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elasticache_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 elasticache_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 elasticache_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 elasticache_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_dhcp_options: Optional[pulumi.Input[bool]] = None,
                 enable_dns_hostnames: Optional[pulumi.Input[bool]] = None,
                 enable_dns_support: Optional[pulumi.Input[bool]] = None,
                 enable_flow_log: Optional[pulumi.Input[bool]] = None,
                 enable_ipv6: Optional[pulumi.Input[bool]] = None,
                 enable_nat_gateway: Optional[pulumi.Input[bool]] = None,
                 enable_network_address_usage_metrics: Optional[pulumi.Input[bool]] = None,
                 enable_public_redshift: Optional[pulumi.Input[bool]] = None,
                 enable_vpn_gateway: Optional[pulumi.Input[bool]] = None,
                 external_nat_ip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_nat_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 flow_log_cloudwatch_iam_role_arn: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_iam_role_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowLogCloudwatchIamRoleConditionsArgs']]]]] = None,
                 flow_log_cloudwatch_log_group_class: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_kms_key_id: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_name_prefix: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_name_suffix: Optional[pulumi.Input[str]] = None,
                 flow_log_cloudwatch_log_group_retention_in_days: Optional[pulumi.Input[float]] = None,
                 flow_log_cloudwatch_log_group_skip_destroy: Optional[pulumi.Input[bool]] = None,
                 flow_log_deliver_cross_account_role: Optional[pulumi.Input[str]] = None,
                 flow_log_destination_arn: Optional[pulumi.Input[str]] = None,
                 flow_log_destination_type: Optional[pulumi.Input[str]] = None,
                 flow_log_file_format: Optional[pulumi.Input[str]] = None,
                 flow_log_hive_compatible_partitions: Optional[pulumi.Input[bool]] = None,
                 flow_log_log_format: Optional[pulumi.Input[str]] = None,
                 flow_log_max_aggregation_interval: Optional[pulumi.Input[float]] = None,
                 flow_log_per_hour_partition: Optional[pulumi.Input[bool]] = None,
                 flow_log_traffic_type: Optional[pulumi.Input[str]] = None,
                 igw_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 instance_tenancy: Optional[pulumi.Input[str]] = None,
                 intra_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 intra_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 intra_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 intra_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 intra_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 intra_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 intra_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 intra_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 intra_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 intra_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 intra_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 intra_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv4_ipam_pool_id: Optional[pulumi.Input[str]] = None,
                 ipv4_netmask_length: Optional[pulumi.Input[float]] = None,
                 ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 ipv6_cidr_block_network_border_group: Optional[pulumi.Input[str]] = None,
                 ipv6_ipam_pool_id: Optional[pulumi.Input[str]] = None,
                 ipv6_netmask_length: Optional[pulumi.Input[float]] = None,
                 manage_default_network_acl: Optional[pulumi.Input[bool]] = None,
                 manage_default_route_table: Optional[pulumi.Input[bool]] = None,
                 manage_default_security_group: Optional[pulumi.Input[bool]] = None,
                 manage_default_vpc: Optional[pulumi.Input[bool]] = None,
                 map_customer_owned_ip_on_launch: Optional[pulumi.Input[bool]] = None,
                 map_public_ip_on_launch: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_eip_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 nat_gateway_destination_cidr_block: Optional[pulumi.Input[str]] = None,
                 nat_gateway_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 one_nat_gateway_per_az: Optional[pulumi.Input[bool]] = None,
                 outpost_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 outpost_arn: Optional[pulumi.Input[str]] = None,
                 outpost_az: Optional[pulumi.Input[str]] = None,
                 outpost_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 outpost_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 outpost_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 outpost_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 outpost_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outpost_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outpost_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 outpost_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 outpost_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 outpost_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 private_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 private_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 private_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 private_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 private_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 private_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 private_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 private_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 private_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 private_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 private_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 private_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 private_subnet_tags_per_az: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 private_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 propagate_intra_route_tables_vgw: Optional[pulumi.Input[bool]] = None,
                 propagate_private_route_tables_vgw: Optional[pulumi.Input[bool]] = None,
                 propagate_public_route_tables_vgw: Optional[pulumi.Input[bool]] = None,
                 public_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 public_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 public_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 public_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 public_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 public_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 public_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 public_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 public_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 public_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 public_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 public_subnet_tags_per_az: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 putin_khuylo: Optional[pulumi.Input[bool]] = None,
                 redshift_acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_dedicated_network_acl: Optional[pulumi.Input[bool]] = None,
                 redshift_inbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 redshift_outbound_acl_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 redshift_route_table_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_subnet_assign_ipv6_address_on_creation: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_enable_dns64: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_enable_resource_name_dns_a_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 redshift_subnet_group_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_subnet_ipv6_native: Optional[pulumi.Input[bool]] = None,
                 redshift_subnet_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redshift_subnet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 redshift_subnet_private_dns_hostname_type_on_launch: Optional[pulumi.Input[str]] = None,
                 redshift_subnet_suffix: Optional[pulumi.Input[str]] = None,
                 redshift_subnet_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 redshift_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reuse_nat_ips: Optional[pulumi.Input[bool]] = None,
                 secondary_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 single_nat_gateway: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 use_ipam_pool: Optional[pulumi.Input[bool]] = None,
                 vpc_flow_log_iam_policy_name: Optional[pulumi.Input[str]] = None,
                 vpc_flow_log_iam_policy_use_name_prefix: Optional[pulumi.Input[bool]] = None,
                 vpc_flow_log_iam_role_name: Optional[pulumi.Input[str]] = None,
                 vpc_flow_log_iam_role_use_name_prefix: Optional[pulumi.Input[bool]] = None,
                 vpc_flow_log_permissions_boundary: Optional[pulumi.Input[str]] = None,
                 vpc_flow_log_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpn_gateway_az: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_id: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcArgs.__new__(VpcArgs)

            __props__.__dict__["amazon_side_asn"] = amazon_side_asn
            __props__.__dict__["azs"] = azs
            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["create_database_internet_gateway_route"] = create_database_internet_gateway_route
            __props__.__dict__["create_database_nat_gateway_route"] = create_database_nat_gateway_route
            __props__.__dict__["create_database_subnet_group"] = create_database_subnet_group
            __props__.__dict__["create_database_subnet_route_table"] = create_database_subnet_route_table
            __props__.__dict__["create_egress_only_igw"] = create_egress_only_igw
            __props__.__dict__["create_elasticache_subnet_group"] = create_elasticache_subnet_group
            __props__.__dict__["create_elasticache_subnet_route_table"] = create_elasticache_subnet_route_table
            __props__.__dict__["create_flow_log_cloudwatch_iam_role"] = create_flow_log_cloudwatch_iam_role
            __props__.__dict__["create_flow_log_cloudwatch_log_group"] = create_flow_log_cloudwatch_log_group
            __props__.__dict__["create_igw"] = create_igw
            __props__.__dict__["create_multiple_intra_route_tables"] = create_multiple_intra_route_tables
            __props__.__dict__["create_multiple_public_route_tables"] = create_multiple_public_route_tables
            __props__.__dict__["create_private_nat_gateway_route"] = create_private_nat_gateway_route
            __props__.__dict__["create_redshift_subnet_group"] = create_redshift_subnet_group
            __props__.__dict__["create_redshift_subnet_route_table"] = create_redshift_subnet_route_table
            __props__.__dict__["create_vpc"] = create_vpc
            __props__.__dict__["customer_gateway_tags"] = customer_gateway_tags
            __props__.__dict__["customer_gateways"] = customer_gateways
            __props__.__dict__["customer_owned_ipv4_pool"] = customer_owned_ipv4_pool
            __props__.__dict__["database_acl_tags"] = database_acl_tags
            __props__.__dict__["database_dedicated_network_acl"] = database_dedicated_network_acl
            __props__.__dict__["database_inbound_acl_rules"] = database_inbound_acl_rules
            __props__.__dict__["database_outbound_acl_rules"] = database_outbound_acl_rules
            __props__.__dict__["database_route_table_tags"] = database_route_table_tags
            __props__.__dict__["database_subnet_assign_ipv6_address_on_creation"] = database_subnet_assign_ipv6_address_on_creation
            __props__.__dict__["database_subnet_enable_dns64"] = database_subnet_enable_dns64
            __props__.__dict__["database_subnet_enable_resource_name_dns_a_record_on_launch"] = database_subnet_enable_resource_name_dns_a_record_on_launch
            __props__.__dict__["database_subnet_enable_resource_name_dns_aaaa_record_on_launch"] = database_subnet_enable_resource_name_dns_aaaa_record_on_launch
            __props__.__dict__["database_subnet_group_name"] = database_subnet_group_name
            __props__.__dict__["database_subnet_group_tags"] = database_subnet_group_tags
            __props__.__dict__["database_subnet_ipv6_native"] = database_subnet_ipv6_native
            __props__.__dict__["database_subnet_ipv6_prefixes"] = database_subnet_ipv6_prefixes
            __props__.__dict__["database_subnet_names"] = database_subnet_names
            __props__.__dict__["database_subnet_private_dns_hostname_type_on_launch"] = database_subnet_private_dns_hostname_type_on_launch
            __props__.__dict__["database_subnet_suffix"] = database_subnet_suffix
            __props__.__dict__["database_subnet_tags"] = database_subnet_tags
            __props__.__dict__["database_subnets"] = database_subnets
            __props__.__dict__["default_network_acl_egress"] = default_network_acl_egress
            __props__.__dict__["default_network_acl_ingress"] = default_network_acl_ingress
            __props__.__dict__["default_network_acl_name"] = default_network_acl_name
            __props__.__dict__["default_network_acl_tags"] = default_network_acl_tags
            __props__.__dict__["default_route_table_name"] = default_route_table_name
            __props__.__dict__["default_route_table_propagating_vgws"] = default_route_table_propagating_vgws
            __props__.__dict__["default_route_table_routes"] = default_route_table_routes
            __props__.__dict__["default_route_table_tags"] = default_route_table_tags
            __props__.__dict__["default_security_group_egress"] = default_security_group_egress
            __props__.__dict__["default_security_group_ingress"] = default_security_group_ingress
            __props__.__dict__["default_security_group_name"] = default_security_group_name
            __props__.__dict__["default_security_group_tags"] = default_security_group_tags
            __props__.__dict__["default_vpc_enable_dns_hostnames"] = default_vpc_enable_dns_hostnames
            __props__.__dict__["default_vpc_enable_dns_support"] = default_vpc_enable_dns_support
            __props__.__dict__["default_vpc_name"] = default_vpc_name
            __props__.__dict__["default_vpc_tags"] = default_vpc_tags
            __props__.__dict__["dhcp_options_domain_name"] = dhcp_options_domain_name
            __props__.__dict__["dhcp_options_domain_name_servers"] = dhcp_options_domain_name_servers
            __props__.__dict__["dhcp_options_ipv6_address_preferred_lease_time"] = dhcp_options_ipv6_address_preferred_lease_time
            __props__.__dict__["dhcp_options_netbios_name_servers"] = dhcp_options_netbios_name_servers
            __props__.__dict__["dhcp_options_netbios_node_type"] = dhcp_options_netbios_node_type
            __props__.__dict__["dhcp_options_ntp_servers"] = dhcp_options_ntp_servers
            __props__.__dict__["dhcp_options_tags"] = dhcp_options_tags
            __props__.__dict__["elasticache_acl_tags"] = elasticache_acl_tags
            __props__.__dict__["elasticache_dedicated_network_acl"] = elasticache_dedicated_network_acl
            __props__.__dict__["elasticache_inbound_acl_rules"] = elasticache_inbound_acl_rules
            __props__.__dict__["elasticache_outbound_acl_rules"] = elasticache_outbound_acl_rules
            __props__.__dict__["elasticache_route_table_tags"] = elasticache_route_table_tags
            __props__.__dict__["elasticache_subnet_assign_ipv6_address_on_creation"] = elasticache_subnet_assign_ipv6_address_on_creation
            __props__.__dict__["elasticache_subnet_enable_dns64"] = elasticache_subnet_enable_dns64
            __props__.__dict__["elasticache_subnet_enable_resource_name_dns_a_record_on_launch"] = elasticache_subnet_enable_resource_name_dns_a_record_on_launch
            __props__.__dict__["elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch"] = elasticache_subnet_enable_resource_name_dns_aaaa_record_on_launch
            __props__.__dict__["elasticache_subnet_group_name"] = elasticache_subnet_group_name
            __props__.__dict__["elasticache_subnet_group_tags"] = elasticache_subnet_group_tags
            __props__.__dict__["elasticache_subnet_ipv6_native"] = elasticache_subnet_ipv6_native
            __props__.__dict__["elasticache_subnet_ipv6_prefixes"] = elasticache_subnet_ipv6_prefixes
            __props__.__dict__["elasticache_subnet_names"] = elasticache_subnet_names
            __props__.__dict__["elasticache_subnet_private_dns_hostname_type_on_launch"] = elasticache_subnet_private_dns_hostname_type_on_launch
            __props__.__dict__["elasticache_subnet_suffix"] = elasticache_subnet_suffix
            __props__.__dict__["elasticache_subnet_tags"] = elasticache_subnet_tags
            __props__.__dict__["elasticache_subnets"] = elasticache_subnets
            __props__.__dict__["enable_dhcp_options"] = enable_dhcp_options
            __props__.__dict__["enable_dns_hostnames"] = enable_dns_hostnames
            __props__.__dict__["enable_dns_support"] = enable_dns_support
            __props__.__dict__["enable_flow_log"] = enable_flow_log
            __props__.__dict__["enable_ipv6"] = enable_ipv6
            __props__.__dict__["enable_nat_gateway"] = enable_nat_gateway
            __props__.__dict__["enable_network_address_usage_metrics"] = enable_network_address_usage_metrics
            __props__.__dict__["enable_public_redshift"] = enable_public_redshift
            __props__.__dict__["enable_vpn_gateway"] = enable_vpn_gateway
            __props__.__dict__["external_nat_ip_ids"] = external_nat_ip_ids
            __props__.__dict__["external_nat_ips"] = external_nat_ips
            __props__.__dict__["flow_log_cloudwatch_iam_role_arn"] = flow_log_cloudwatch_iam_role_arn
            __props__.__dict__["flow_log_cloudwatch_iam_role_conditions"] = flow_log_cloudwatch_iam_role_conditions
            __props__.__dict__["flow_log_cloudwatch_log_group_class"] = flow_log_cloudwatch_log_group_class
            __props__.__dict__["flow_log_cloudwatch_log_group_kms_key_id"] = flow_log_cloudwatch_log_group_kms_key_id
            __props__.__dict__["flow_log_cloudwatch_log_group_name_prefix"] = flow_log_cloudwatch_log_group_name_prefix
            __props__.__dict__["flow_log_cloudwatch_log_group_name_suffix"] = flow_log_cloudwatch_log_group_name_suffix
            __props__.__dict__["flow_log_cloudwatch_log_group_retention_in_days"] = flow_log_cloudwatch_log_group_retention_in_days
            __props__.__dict__["flow_log_cloudwatch_log_group_skip_destroy"] = flow_log_cloudwatch_log_group_skip_destroy
            __props__.__dict__["flow_log_deliver_cross_account_role"] = flow_log_deliver_cross_account_role
            __props__.__dict__["flow_log_destination_arn"] = flow_log_destination_arn
            __props__.__dict__["flow_log_destination_type"] = flow_log_destination_type
            __props__.__dict__["flow_log_file_format"] = flow_log_file_format
            __props__.__dict__["flow_log_hive_compatible_partitions"] = flow_log_hive_compatible_partitions
            __props__.__dict__["flow_log_log_format"] = flow_log_log_format
            __props__.__dict__["flow_log_max_aggregation_interval"] = flow_log_max_aggregation_interval
            __props__.__dict__["flow_log_per_hour_partition"] = flow_log_per_hour_partition
            __props__.__dict__["flow_log_traffic_type"] = flow_log_traffic_type
            __props__.__dict__["igw_tags"] = igw_tags
            __props__.__dict__["instance_tenancy"] = instance_tenancy
            __props__.__dict__["intra_acl_tags"] = intra_acl_tags
            __props__.__dict__["intra_dedicated_network_acl"] = intra_dedicated_network_acl
            __props__.__dict__["intra_inbound_acl_rules"] = intra_inbound_acl_rules
            __props__.__dict__["intra_outbound_acl_rules"] = intra_outbound_acl_rules
            __props__.__dict__["intra_route_table_tags"] = intra_route_table_tags
            __props__.__dict__["intra_subnet_assign_ipv6_address_on_creation"] = intra_subnet_assign_ipv6_address_on_creation
            __props__.__dict__["intra_subnet_enable_dns64"] = intra_subnet_enable_dns64
            __props__.__dict__["intra_subnet_enable_resource_name_dns_a_record_on_launch"] = intra_subnet_enable_resource_name_dns_a_record_on_launch
            __props__.__dict__["intra_subnet_enable_resource_name_dns_aaaa_record_on_launch"] = intra_subnet_enable_resource_name_dns_aaaa_record_on_launch
            __props__.__dict__["intra_subnet_ipv6_native"] = intra_subnet_ipv6_native
            __props__.__dict__["intra_subnet_ipv6_prefixes"] = intra_subnet_ipv6_prefixes
            __props__.__dict__["intra_subnet_names"] = intra_subnet_names
            __props__.__dict__["intra_subnet_private_dns_hostname_type_on_launch"] = intra_subnet_private_dns_hostname_type_on_launch
            __props__.__dict__["intra_subnet_suffix"] = intra_subnet_suffix
            __props__.__dict__["intra_subnet_tags"] = intra_subnet_tags
            __props__.__dict__["intra_subnets"] = intra_subnets
            __props__.__dict__["ipv4_ipam_pool_id"] = ipv4_ipam_pool_id
            __props__.__dict__["ipv4_netmask_length"] = ipv4_netmask_length
            __props__.__dict__["ipv6_cidr"] = ipv6_cidr
            __props__.__dict__["ipv6_cidr_block_network_border_group"] = ipv6_cidr_block_network_border_group
            __props__.__dict__["ipv6_ipam_pool_id"] = ipv6_ipam_pool_id
            __props__.__dict__["ipv6_netmask_length"] = ipv6_netmask_length
            __props__.__dict__["manage_default_network_acl"] = manage_default_network_acl
            __props__.__dict__["manage_default_route_table"] = manage_default_route_table
            __props__.__dict__["manage_default_security_group"] = manage_default_security_group
            __props__.__dict__["manage_default_vpc"] = manage_default_vpc
            __props__.__dict__["map_customer_owned_ip_on_launch"] = map_customer_owned_ip_on_launch
            __props__.__dict__["map_public_ip_on_launch"] = map_public_ip_on_launch
            __props__.__dict__["name"] = name
            __props__.__dict__["nat_eip_tags"] = nat_eip_tags
            __props__.__dict__["nat_gateway_destination_cidr_block"] = nat_gateway_destination_cidr_block
            __props__.__dict__["nat_gateway_tags"] = nat_gateway_tags
            __props__.__dict__["one_nat_gateway_per_az"] = one_nat_gateway_per_az
            __props__.__dict__["outpost_acl_tags"] = outpost_acl_tags
            __props__.__dict__["outpost_arn"] = outpost_arn
            __props__.__dict__["outpost_az"] = outpost_az
            __props__.__dict__["outpost_dedicated_network_acl"] = outpost_dedicated_network_acl
            __props__.__dict__["outpost_inbound_acl_rules"] = outpost_inbound_acl_rules
            __props__.__dict__["outpost_outbound_acl_rules"] = outpost_outbound_acl_rules
            __props__.__dict__["outpost_subnet_assign_ipv6_address_on_creation"] = outpost_subnet_assign_ipv6_address_on_creation
            __props__.__dict__["outpost_subnet_enable_dns64"] = outpost_subnet_enable_dns64
            __props__.__dict__["outpost_subnet_enable_resource_name_dns_a_record_on_launch"] = outpost_subnet_enable_resource_name_dns_a_record_on_launch
            __props__.__dict__["outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch"] = outpost_subnet_enable_resource_name_dns_aaaa_record_on_launch
            __props__.__dict__["outpost_subnet_ipv6_native"] = outpost_subnet_ipv6_native
            __props__.__dict__["outpost_subnet_ipv6_prefixes"] = outpost_subnet_ipv6_prefixes
            __props__.__dict__["outpost_subnet_names"] = outpost_subnet_names
            __props__.__dict__["outpost_subnet_private_dns_hostname_type_on_launch"] = outpost_subnet_private_dns_hostname_type_on_launch
            __props__.__dict__["outpost_subnet_suffix"] = outpost_subnet_suffix
            __props__.__dict__["outpost_subnet_tags"] = outpost_subnet_tags
            __props__.__dict__["outpost_subnets"] = outpost_subnets
            __props__.__dict__["private_acl_tags"] = private_acl_tags
            __props__.__dict__["private_dedicated_network_acl"] = private_dedicated_network_acl
            __props__.__dict__["private_inbound_acl_rules"] = private_inbound_acl_rules
            __props__.__dict__["private_outbound_acl_rules"] = private_outbound_acl_rules
            __props__.__dict__["private_route_table_tags"] = private_route_table_tags
            __props__.__dict__["private_subnet_assign_ipv6_address_on_creation"] = private_subnet_assign_ipv6_address_on_creation
            __props__.__dict__["private_subnet_enable_dns64"] = private_subnet_enable_dns64
            __props__.__dict__["private_subnet_enable_resource_name_dns_a_record_on_launch"] = private_subnet_enable_resource_name_dns_a_record_on_launch
            __props__.__dict__["private_subnet_enable_resource_name_dns_aaaa_record_on_launch"] = private_subnet_enable_resource_name_dns_aaaa_record_on_launch
            __props__.__dict__["private_subnet_ipv6_native"] = private_subnet_ipv6_native
            __props__.__dict__["private_subnet_ipv6_prefixes"] = private_subnet_ipv6_prefixes
            __props__.__dict__["private_subnet_names"] = private_subnet_names
            __props__.__dict__["private_subnet_private_dns_hostname_type_on_launch"] = private_subnet_private_dns_hostname_type_on_launch
            __props__.__dict__["private_subnet_suffix"] = private_subnet_suffix
            __props__.__dict__["private_subnet_tags"] = private_subnet_tags
            __props__.__dict__["private_subnet_tags_per_az"] = private_subnet_tags_per_az
            __props__.__dict__["private_subnets"] = private_subnets
            __props__.__dict__["propagate_intra_route_tables_vgw"] = propagate_intra_route_tables_vgw
            __props__.__dict__["propagate_private_route_tables_vgw"] = propagate_private_route_tables_vgw
            __props__.__dict__["propagate_public_route_tables_vgw"] = propagate_public_route_tables_vgw
            __props__.__dict__["public_acl_tags"] = public_acl_tags
            __props__.__dict__["public_dedicated_network_acl"] = public_dedicated_network_acl
            __props__.__dict__["public_inbound_acl_rules"] = public_inbound_acl_rules
            __props__.__dict__["public_outbound_acl_rules"] = public_outbound_acl_rules
            __props__.__dict__["public_route_table_tags"] = public_route_table_tags
            __props__.__dict__["public_subnet_assign_ipv6_address_on_creation"] = public_subnet_assign_ipv6_address_on_creation
            __props__.__dict__["public_subnet_enable_dns64"] = public_subnet_enable_dns64
            __props__.__dict__["public_subnet_enable_resource_name_dns_a_record_on_launch"] = public_subnet_enable_resource_name_dns_a_record_on_launch
            __props__.__dict__["public_subnet_enable_resource_name_dns_aaaa_record_on_launch"] = public_subnet_enable_resource_name_dns_aaaa_record_on_launch
            __props__.__dict__["public_subnet_ipv6_native"] = public_subnet_ipv6_native
            __props__.__dict__["public_subnet_ipv6_prefixes"] = public_subnet_ipv6_prefixes
            __props__.__dict__["public_subnet_names"] = public_subnet_names
            __props__.__dict__["public_subnet_private_dns_hostname_type_on_launch"] = public_subnet_private_dns_hostname_type_on_launch
            __props__.__dict__["public_subnet_suffix"] = public_subnet_suffix
            __props__.__dict__["public_subnet_tags"] = public_subnet_tags
            __props__.__dict__["public_subnet_tags_per_az"] = public_subnet_tags_per_az
            __props__.__dict__["public_subnets"] = public_subnets
            __props__.__dict__["putin_khuylo"] = putin_khuylo
            __props__.__dict__["redshift_acl_tags"] = redshift_acl_tags
            __props__.__dict__["redshift_dedicated_network_acl"] = redshift_dedicated_network_acl
            __props__.__dict__["redshift_inbound_acl_rules"] = redshift_inbound_acl_rules
            __props__.__dict__["redshift_outbound_acl_rules"] = redshift_outbound_acl_rules
            __props__.__dict__["redshift_route_table_tags"] = redshift_route_table_tags
            __props__.__dict__["redshift_subnet_assign_ipv6_address_on_creation"] = redshift_subnet_assign_ipv6_address_on_creation
            __props__.__dict__["redshift_subnet_enable_dns64"] = redshift_subnet_enable_dns64
            __props__.__dict__["redshift_subnet_enable_resource_name_dns_a_record_on_launch"] = redshift_subnet_enable_resource_name_dns_a_record_on_launch
            __props__.__dict__["redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch"] = redshift_subnet_enable_resource_name_dns_aaaa_record_on_launch
            __props__.__dict__["redshift_subnet_group_name"] = redshift_subnet_group_name
            __props__.__dict__["redshift_subnet_group_tags"] = redshift_subnet_group_tags
            __props__.__dict__["redshift_subnet_ipv6_native"] = redshift_subnet_ipv6_native
            __props__.__dict__["redshift_subnet_ipv6_prefixes"] = redshift_subnet_ipv6_prefixes
            __props__.__dict__["redshift_subnet_names"] = redshift_subnet_names
            __props__.__dict__["redshift_subnet_private_dns_hostname_type_on_launch"] = redshift_subnet_private_dns_hostname_type_on_launch
            __props__.__dict__["redshift_subnet_suffix"] = redshift_subnet_suffix
            __props__.__dict__["redshift_subnet_tags"] = redshift_subnet_tags
            __props__.__dict__["redshift_subnets"] = redshift_subnets
            __props__.__dict__["reuse_nat_ips"] = reuse_nat_ips
            __props__.__dict__["secondary_cidr_blocks"] = secondary_cidr_blocks
            __props__.__dict__["single_nat_gateway"] = single_nat_gateway
            __props__.__dict__["tags"] = tags
            __props__.__dict__["use_ipam_pool"] = use_ipam_pool
            __props__.__dict__["vpc_flow_log_iam_policy_name"] = vpc_flow_log_iam_policy_name
            __props__.__dict__["vpc_flow_log_iam_policy_use_name_prefix"] = vpc_flow_log_iam_policy_use_name_prefix
            __props__.__dict__["vpc_flow_log_iam_role_name"] = vpc_flow_log_iam_role_name
            __props__.__dict__["vpc_flow_log_iam_role_use_name_prefix"] = vpc_flow_log_iam_role_use_name_prefix
            __props__.__dict__["vpc_flow_log_permissions_boundary"] = vpc_flow_log_permissions_boundary
            __props__.__dict__["vpc_flow_log_tags"] = vpc_flow_log_tags
            __props__.__dict__["vpc_tags"] = vpc_tags
            __props__.__dict__["vpn_gateway_az"] = vpn_gateway_az
            __props__.__dict__["vpn_gateway_id"] = vpn_gateway_id
            __props__.__dict__["vpn_gateway_tags"] = vpn_gateway_tags
            __props__.__dict__["cgw_arns"] = None
            __props__.__dict__["cgw_ids"] = None
            __props__.__dict__["database_internet_gateway_route_id"] = None
            __props__.__dict__["database_ipv6_egress_route_id"] = None
            __props__.__dict__["database_nat_gateway_route_ids"] = None
            __props__.__dict__["database_network_acl_arn"] = None
            __props__.__dict__["database_network_acl_id"] = None
            __props__.__dict__["database_route_table_association_ids"] = None
            __props__.__dict__["database_route_table_ids"] = None
            __props__.__dict__["database_subnet_arns"] = None
            __props__.__dict__["database_subnet_group"] = None
            __props__.__dict__["database_subnet_objects"] = None
            __props__.__dict__["database_subnets_cidr_blocks"] = None
            __props__.__dict__["database_subnets_ipv6_cidr_blocks"] = None
            __props__.__dict__["default_network_acl_id"] = None
            __props__.__dict__["default_route_table_id"] = None
            __props__.__dict__["default_security_group_id"] = None
            __props__.__dict__["default_vpc_arn"] = None
            __props__.__dict__["default_vpc_cidr_block"] = None
            __props__.__dict__["default_vpc_default_network_acl_id"] = None
            __props__.__dict__["default_vpc_default_route_table_id"] = None
            __props__.__dict__["default_vpc_default_security_group_id"] = None
            __props__.__dict__["default_vpc_id"] = None
            __props__.__dict__["default_vpc_instance_tenancy"] = None
            __props__.__dict__["default_vpc_main_route_table_id"] = None
            __props__.__dict__["dhcp_options_id"] = None
            __props__.__dict__["egress_only_internet_gateway_id"] = None
            __props__.__dict__["elasticache_network_acl_arn"] = None
            __props__.__dict__["elasticache_network_acl_id"] = None
            __props__.__dict__["elasticache_route_table_association_ids"] = None
            __props__.__dict__["elasticache_route_table_ids"] = None
            __props__.__dict__["elasticache_subnet_arns"] = None
            __props__.__dict__["elasticache_subnet_group"] = None
            __props__.__dict__["elasticache_subnet_objects"] = None
            __props__.__dict__["elasticache_subnets_cidr_blocks"] = None
            __props__.__dict__["elasticache_subnets_ipv6_cidr_blocks"] = None
            __props__.__dict__["igw_arn"] = None
            __props__.__dict__["igw_id"] = None
            __props__.__dict__["intra_network_acl_arn"] = None
            __props__.__dict__["intra_network_acl_id"] = None
            __props__.__dict__["intra_route_table_association_ids"] = None
            __props__.__dict__["intra_route_table_ids"] = None
            __props__.__dict__["intra_subnet_arns"] = None
            __props__.__dict__["intra_subnet_objects"] = None
            __props__.__dict__["intra_subnets_cidr_blocks"] = None
            __props__.__dict__["intra_subnets_ipv6_cidr_blocks"] = None
            __props__.__dict__["nat_ids"] = None
            __props__.__dict__["nat_public_ips"] = None
            __props__.__dict__["natgw_ids"] = None
            __props__.__dict__["natgw_interface_ids"] = None
            __props__.__dict__["outpost_network_acl_arn"] = None
            __props__.__dict__["outpost_network_acl_id"] = None
            __props__.__dict__["outpost_subnet_arns"] = None
            __props__.__dict__["outpost_subnet_objects"] = None
            __props__.__dict__["outpost_subnets_cidr_blocks"] = None
            __props__.__dict__["outpost_subnets_ipv6_cidr_blocks"] = None
            __props__.__dict__["private_ipv6_egress_route_ids"] = None
            __props__.__dict__["private_nat_gateway_route_ids"] = None
            __props__.__dict__["private_network_acl_arn"] = None
            __props__.__dict__["private_network_acl_id"] = None
            __props__.__dict__["private_route_table_association_ids"] = None
            __props__.__dict__["private_route_table_ids"] = None
            __props__.__dict__["private_subnet_arns"] = None
            __props__.__dict__["private_subnet_objects"] = None
            __props__.__dict__["private_subnets_cidr_blocks"] = None
            __props__.__dict__["private_subnets_ipv6_cidr_blocks"] = None
            __props__.__dict__["public_internet_gateway_ipv6_route_id"] = None
            __props__.__dict__["public_internet_gateway_route_id"] = None
            __props__.__dict__["public_network_acl_arn"] = None
            __props__.__dict__["public_network_acl_id"] = None
            __props__.__dict__["public_route_table_association_ids"] = None
            __props__.__dict__["public_route_table_ids"] = None
            __props__.__dict__["public_subnet_arns"] = None
            __props__.__dict__["public_subnet_objects"] = None
            __props__.__dict__["public_subnets_cidr_blocks"] = None
            __props__.__dict__["public_subnets_ipv6_cidr_blocks"] = None
            __props__.__dict__["redshift_network_acl_arn"] = None
            __props__.__dict__["redshift_network_acl_id"] = None
            __props__.__dict__["redshift_public_route_table_association_ids"] = None
            __props__.__dict__["redshift_route_table_association_ids"] = None
            __props__.__dict__["redshift_route_table_ids"] = None
            __props__.__dict__["redshift_subnet_arns"] = None
            __props__.__dict__["redshift_subnet_group"] = None
            __props__.__dict__["redshift_subnet_objects"] = None
            __props__.__dict__["redshift_subnets_cidr_blocks"] = None
            __props__.__dict__["redshift_subnets_ipv6_cidr_blocks"] = None
            __props__.__dict__["this_customer_gateway"] = None
            __props__.__dict__["vgw_arn"] = None
            __props__.__dict__["vgw_id"] = None
            __props__.__dict__["vpc_arn"] = None
            __props__.__dict__["vpc_cidr_block"] = None
            __props__.__dict__["vpc_enable_dns_hostnames"] = None
            __props__.__dict__["vpc_enable_dns_support"] = None
            __props__.__dict__["vpc_flow_log_cloudwatch_iam_role_arn"] = None
            __props__.__dict__["vpc_flow_log_deliver_cross_account_role"] = None
            __props__.__dict__["vpc_flow_log_destination_arn"] = None
            __props__.__dict__["vpc_flow_log_destination_type"] = None
            __props__.__dict__["vpc_flow_log_id"] = None
            __props__.__dict__["vpc_id"] = None
            __props__.__dict__["vpc_instance_tenancy"] = None
            __props__.__dict__["vpc_ipv6_association_id"] = None
            __props__.__dict__["vpc_ipv6_cidr_block"] = None
            __props__.__dict__["vpc_main_route_table_id"] = None
            __props__.__dict__["vpc_owner_id"] = None
            __props__.__dict__["vpc_secondary_cidr_blocks"] = None
        super(Vpc, __self__).__init__(
            'terraform-aws-modules:index:Vpc',
            resource_name,
            __props__,
            opts,
            remote=True,
            package_ref=_utilities.get_package())

    @property
    @pulumi.getter
    def azs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of availability zones specified as argument to this module
        """
        return pulumi.get(self, "azs")

    @property
    @pulumi.getter
    def cgw_arns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of ARNs of Customer Gateway
        """
        return pulumi.get(self, "cgw_arns")

    @property
    @pulumi.getter
    def cgw_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of Customer Gateway
        """
        return pulumi.get(self, "cgw_ids")

    @property
    @pulumi.getter
    def database_internet_gateway_route_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the database internet gateway route
        """
        return pulumi.get(self, "database_internet_gateway_route_id")

    @property
    @pulumi.getter
    def database_ipv6_egress_route_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the database IPv6 egress route
        """
        return pulumi.get(self, "database_ipv6_egress_route_id")

    @property
    @pulumi.getter
    def database_nat_gateway_route_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of the database nat gateway route
        """
        return pulumi.get(self, "database_nat_gateway_route_ids")

    @property
    @pulumi.getter
    def database_network_acl_arn(self) -> pulumi.Output[Optional[str]]:
        """
        ARN of the database network ACL
        """
        return pulumi.get(self, "database_network_acl_arn")

    @property
    @pulumi.getter
    def database_network_acl_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the database network ACL
        """
        return pulumi.get(self, "database_network_acl_id")

    @property
    @pulumi.getter
    def database_route_table_association_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of the database route table association
        """
        return pulumi.get(self, "database_route_table_association_ids")

    @property
    @pulumi.getter
    def database_route_table_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of database route tables
        """
        return pulumi.get(self, "database_route_table_ids")

    @property
    @pulumi.getter
    def database_subnet_arns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of ARNs of database subnets
        """
        return pulumi.get(self, "database_subnet_arns")

    @property
    @pulumi.getter
    def database_subnet_group(self) -> pulumi.Output[Optional[str]]:
        """
        ID of database subnet group
        """
        return pulumi.get(self, "database_subnet_group")

    @property
    @pulumi.getter
    def database_subnet_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of database subnet group
        """
        return pulumi.get(self, "database_subnet_group_name")

    @property
    @pulumi.getter
    def database_subnet_objects(self) -> pulumi.Output[Optional[str]]:
        """
        A list of all database subnets, containing the full objects.
        """
        return pulumi.get(self, "database_subnet_objects")

    @property
    @pulumi.getter
    def database_subnets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of database subnets
        """
        return pulumi.get(self, "database_subnets")

    @property
    @pulumi.getter
    def database_subnets_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of cidr_blocks of database subnets
        """
        return pulumi.get(self, "database_subnets_cidr_blocks")

    @property
    @pulumi.getter
    def database_subnets_ipv6_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IPv6 cidr_blocks of database subnets in an IPv6 enabled VPC
        """
        return pulumi.get(self, "database_subnets_ipv6_cidr_blocks")

    @property
    @pulumi.getter
    def default_network_acl_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the default network ACL
        """
        return pulumi.get(self, "default_network_acl_id")

    @property
    @pulumi.getter
    def default_route_table_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the default route table
        """
        return pulumi.get(self, "default_route_table_id")

    @property
    @pulumi.getter
    def default_security_group_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the security group created by default on VPC creation
        """
        return pulumi.get(self, "default_security_group_id")

    @property
    @pulumi.getter
    def default_vpc_arn(self) -> pulumi.Output[Optional[str]]:
        """
        The ARN of the Default VPC
        """
        return pulumi.get(self, "default_vpc_arn")

    @property
    @pulumi.getter
    def default_vpc_cidr_block(self) -> pulumi.Output[Optional[str]]:
        """
        The CIDR block of the Default VPC
        """
        return pulumi.get(self, "default_vpc_cidr_block")

    @property
    @pulumi.getter
    def default_vpc_default_network_acl_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the default network ACL of the Default VPC
        """
        return pulumi.get(self, "default_vpc_default_network_acl_id")

    @property
    @pulumi.getter
    def default_vpc_default_route_table_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the default route table of the Default VPC
        """
        return pulumi.get(self, "default_vpc_default_route_table_id")

    @property
    @pulumi.getter
    def default_vpc_default_security_group_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the security group created by default on Default VPC creation
        """
        return pulumi.get(self, "default_vpc_default_security_group_id")

    @property
    @pulumi.getter
    def default_vpc_enable_dns_hostnames(self) -> pulumi.Output[Optional[str]]:
        """
        Whether or not the Default VPC has DNS hostname support
        """
        return pulumi.get(self, "default_vpc_enable_dns_hostnames")

    @property
    @pulumi.getter
    def default_vpc_enable_dns_support(self) -> pulumi.Output[Optional[str]]:
        """
        Whether or not the Default VPC has DNS support
        """
        return pulumi.get(self, "default_vpc_enable_dns_support")

    @property
    @pulumi.getter
    def default_vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the Default VPC
        """
        return pulumi.get(self, "default_vpc_id")

    @property
    @pulumi.getter
    def default_vpc_instance_tenancy(self) -> pulumi.Output[Optional[str]]:
        """
        Tenancy of instances spin up within Default VPC
        """
        return pulumi.get(self, "default_vpc_instance_tenancy")

    @property
    @pulumi.getter
    def default_vpc_main_route_table_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the main route table associated with the Default VPC
        """
        return pulumi.get(self, "default_vpc_main_route_table_id")

    @property
    @pulumi.getter
    def dhcp_options_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the DHCP options
        """
        return pulumi.get(self, "dhcp_options_id")

    @property
    @pulumi.getter
    def egress_only_internet_gateway_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the egress only Internet Gateway
        """
        return pulumi.get(self, "egress_only_internet_gateway_id")

    @property
    @pulumi.getter
    def elasticache_network_acl_arn(self) -> pulumi.Output[Optional[str]]:
        """
        ARN of the elasticache network ACL
        """
        return pulumi.get(self, "elasticache_network_acl_arn")

    @property
    @pulumi.getter
    def elasticache_network_acl_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the elasticache network ACL
        """
        return pulumi.get(self, "elasticache_network_acl_id")

    @property
    @pulumi.getter
    def elasticache_route_table_association_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of the elasticache route table association
        """
        return pulumi.get(self, "elasticache_route_table_association_ids")

    @property
    @pulumi.getter
    def elasticache_route_table_ids(self) -> pulumi.Output[Optional[str]]:
        """
        List of IDs of elasticache route tables
        """
        return pulumi.get(self, "elasticache_route_table_ids")

    @property
    @pulumi.getter
    def elasticache_subnet_arns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of ARNs of elasticache subnets
        """
        return pulumi.get(self, "elasticache_subnet_arns")

    @property
    @pulumi.getter
    def elasticache_subnet_group(self) -> pulumi.Output[Optional[str]]:
        """
        ID of elasticache subnet group
        """
        return pulumi.get(self, "elasticache_subnet_group")

    @property
    @pulumi.getter
    def elasticache_subnet_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of elasticache subnet group
        """
        return pulumi.get(self, "elasticache_subnet_group_name")

    @property
    @pulumi.getter
    def elasticache_subnet_objects(self) -> pulumi.Output[Optional[str]]:
        """
        A list of all elasticache subnets, containing the full objects.
        """
        return pulumi.get(self, "elasticache_subnet_objects")

    @property
    @pulumi.getter
    def elasticache_subnets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of elasticache subnets
        """
        return pulumi.get(self, "elasticache_subnets")

    @property
    @pulumi.getter
    def elasticache_subnets_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of cidr_blocks of elasticache subnets
        """
        return pulumi.get(self, "elasticache_subnets_cidr_blocks")

    @property
    @pulumi.getter
    def elasticache_subnets_ipv6_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IPv6 cidr_blocks of elasticache subnets in an IPv6 enabled VPC
        """
        return pulumi.get(self, "elasticache_subnets_ipv6_cidr_blocks")

    @property
    @pulumi.getter
    def igw_arn(self) -> pulumi.Output[Optional[str]]:
        """
        The ARN of the Internet Gateway
        """
        return pulumi.get(self, "igw_arn")

    @property
    @pulumi.getter
    def igw_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the Internet Gateway
        """
        return pulumi.get(self, "igw_id")

    @property
    @pulumi.getter
    def intra_network_acl_arn(self) -> pulumi.Output[Optional[str]]:
        """
        ARN of the intra network ACL
        """
        return pulumi.get(self, "intra_network_acl_arn")

    @property
    @pulumi.getter
    def intra_network_acl_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the intra network ACL
        """
        return pulumi.get(self, "intra_network_acl_id")

    @property
    @pulumi.getter
    def intra_route_table_association_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of the intra route table association
        """
        return pulumi.get(self, "intra_route_table_association_ids")

    @property
    @pulumi.getter
    def intra_route_table_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of intra route tables
        """
        return pulumi.get(self, "intra_route_table_ids")

    @property
    @pulumi.getter
    def intra_subnet_arns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of ARNs of intra subnets
        """
        return pulumi.get(self, "intra_subnet_arns")

    @property
    @pulumi.getter
    def intra_subnet_objects(self) -> pulumi.Output[Optional[str]]:
        """
        A list of all intra subnets, containing the full objects.
        """
        return pulumi.get(self, "intra_subnet_objects")

    @property
    @pulumi.getter
    def intra_subnets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of intra subnets
        """
        return pulumi.get(self, "intra_subnets")

    @property
    @pulumi.getter
    def intra_subnets_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of cidr_blocks of intra subnets
        """
        return pulumi.get(self, "intra_subnets_cidr_blocks")

    @property
    @pulumi.getter
    def intra_subnets_ipv6_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IPv6 cidr_blocks of intra subnets in an IPv6 enabled VPC
        """
        return pulumi.get(self, "intra_subnets_ipv6_cidr_blocks")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the VPC specified as argument to this module
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of allocation ID of Elastic IPs created for AWS NAT Gateway
        """
        return pulumi.get(self, "nat_ids")

    @property
    @pulumi.getter
    def nat_public_ips(self) -> pulumi.Output[Optional[str]]:
        """
        List of public Elastic IPs created for AWS NAT Gateway
        """
        return pulumi.get(self, "nat_public_ips")

    @property
    @pulumi.getter
    def natgw_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of NAT Gateway IDs
        """
        return pulumi.get(self, "natgw_ids")

    @property
    @pulumi.getter
    def natgw_interface_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of Network Interface IDs assigned to NAT Gateways
        """
        return pulumi.get(self, "natgw_interface_ids")

    @property
    @pulumi.getter
    def outpost_network_acl_arn(self) -> pulumi.Output[Optional[str]]:
        """
        ARN of the outpost network ACL
        """
        return pulumi.get(self, "outpost_network_acl_arn")

    @property
    @pulumi.getter
    def outpost_network_acl_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the outpost network ACL
        """
        return pulumi.get(self, "outpost_network_acl_id")

    @property
    @pulumi.getter
    def outpost_subnet_arns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of ARNs of outpost subnets
        """
        return pulumi.get(self, "outpost_subnet_arns")

    @property
    @pulumi.getter
    def outpost_subnet_objects(self) -> pulumi.Output[Optional[str]]:
        """
        A list of all outpost subnets, containing the full objects.
        """
        return pulumi.get(self, "outpost_subnet_objects")

    @property
    @pulumi.getter
    def outpost_subnets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of outpost subnets
        """
        return pulumi.get(self, "outpost_subnets")

    @property
    @pulumi.getter
    def outpost_subnets_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of cidr_blocks of outpost subnets
        """
        return pulumi.get(self, "outpost_subnets_cidr_blocks")

    @property
    @pulumi.getter
    def outpost_subnets_ipv6_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IPv6 cidr_blocks of outpost subnets in an IPv6 enabled VPC
        """
        return pulumi.get(self, "outpost_subnets_ipv6_cidr_blocks")

    @property
    @pulumi.getter
    def private_ipv6_egress_route_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of the ipv6 egress route
        """
        return pulumi.get(self, "private_ipv6_egress_route_ids")

    @property
    @pulumi.getter
    def private_nat_gateway_route_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of the private nat gateway route
        """
        return pulumi.get(self, "private_nat_gateway_route_ids")

    @property
    @pulumi.getter
    def private_network_acl_arn(self) -> pulumi.Output[Optional[str]]:
        """
        ARN of the private network ACL
        """
        return pulumi.get(self, "private_network_acl_arn")

    @property
    @pulumi.getter
    def private_network_acl_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the private network ACL
        """
        return pulumi.get(self, "private_network_acl_id")

    @property
    @pulumi.getter
    def private_route_table_association_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of the private route table association
        """
        return pulumi.get(self, "private_route_table_association_ids")

    @property
    @pulumi.getter
    def private_route_table_ids(self) -> pulumi.Output[Optional[str]]:
        """
        List of IDs of private route tables
        """
        return pulumi.get(self, "private_route_table_ids")

    @property
    @pulumi.getter
    def private_subnet_arns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of ARNs of private subnets
        """
        return pulumi.get(self, "private_subnet_arns")

    @property
    @pulumi.getter
    def private_subnet_objects(self) -> pulumi.Output[Optional[str]]:
        """
        A list of all private subnets, containing the full objects.
        """
        return pulumi.get(self, "private_subnet_objects")

    @property
    @pulumi.getter
    def private_subnets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of private subnets
        """
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter
    def private_subnets_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of cidr_blocks of private subnets
        """
        return pulumi.get(self, "private_subnets_cidr_blocks")

    @property
    @pulumi.getter
    def private_subnets_ipv6_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IPv6 cidr_blocks of private subnets in an IPv6 enabled VPC
        """
        return pulumi.get(self, "private_subnets_ipv6_cidr_blocks")

    @property
    @pulumi.getter
    def public_internet_gateway_ipv6_route_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the IPv6 internet gateway route
        """
        return pulumi.get(self, "public_internet_gateway_ipv6_route_id")

    @property
    @pulumi.getter
    def public_internet_gateway_route_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the internet gateway route
        """
        return pulumi.get(self, "public_internet_gateway_route_id")

    @property
    @pulumi.getter
    def public_network_acl_arn(self) -> pulumi.Output[Optional[str]]:
        """
        ARN of the public network ACL
        """
        return pulumi.get(self, "public_network_acl_arn")

    @property
    @pulumi.getter
    def public_network_acl_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the public network ACL
        """
        return pulumi.get(self, "public_network_acl_id")

    @property
    @pulumi.getter
    def public_route_table_association_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of the public route table association
        """
        return pulumi.get(self, "public_route_table_association_ids")

    @property
    @pulumi.getter
    def public_route_table_ids(self) -> pulumi.Output[Optional[str]]:
        """
        List of IDs of public route tables
        """
        return pulumi.get(self, "public_route_table_ids")

    @property
    @pulumi.getter
    def public_subnet_arns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of ARNs of public subnets
        """
        return pulumi.get(self, "public_subnet_arns")

    @property
    @pulumi.getter
    def public_subnet_objects(self) -> pulumi.Output[Optional[str]]:
        """
        A list of all public subnets, containing the full objects.
        """
        return pulumi.get(self, "public_subnet_objects")

    @property
    @pulumi.getter
    def public_subnets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of public subnets
        """
        return pulumi.get(self, "public_subnets")

    @property
    @pulumi.getter
    def public_subnets_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of cidr_blocks of public subnets
        """
        return pulumi.get(self, "public_subnets_cidr_blocks")

    @property
    @pulumi.getter
    def public_subnets_ipv6_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IPv6 cidr_blocks of public subnets in an IPv6 enabled VPC
        """
        return pulumi.get(self, "public_subnets_ipv6_cidr_blocks")

    @property
    @pulumi.getter
    def redshift_network_acl_arn(self) -> pulumi.Output[Optional[str]]:
        """
        ARN of the redshift network ACL
        """
        return pulumi.get(self, "redshift_network_acl_arn")

    @property
    @pulumi.getter
    def redshift_network_acl_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the redshift network ACL
        """
        return pulumi.get(self, "redshift_network_acl_id")

    @property
    @pulumi.getter
    def redshift_public_route_table_association_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of the public redshift route table association
        """
        return pulumi.get(self, "redshift_public_route_table_association_ids")

    @property
    @pulumi.getter
    def redshift_route_table_association_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of the redshift route table association
        """
        return pulumi.get(self, "redshift_route_table_association_ids")

    @property
    @pulumi.getter
    def redshift_route_table_ids(self) -> pulumi.Output[Optional[str]]:
        """
        List of IDs of redshift route tables
        """
        return pulumi.get(self, "redshift_route_table_ids")

    @property
    @pulumi.getter
    def redshift_subnet_arns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of ARNs of redshift subnets
        """
        return pulumi.get(self, "redshift_subnet_arns")

    @property
    @pulumi.getter
    def redshift_subnet_group(self) -> pulumi.Output[Optional[str]]:
        """
        ID of redshift subnet group
        """
        return pulumi.get(self, "redshift_subnet_group")

    @property
    @pulumi.getter
    def redshift_subnet_objects(self) -> pulumi.Output[Optional[str]]:
        """
        A list of all redshift subnets, containing the full objects.
        """
        return pulumi.get(self, "redshift_subnet_objects")

    @property
    @pulumi.getter
    def redshift_subnets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IDs of redshift subnets
        """
        return pulumi.get(self, "redshift_subnets")

    @property
    @pulumi.getter
    def redshift_subnets_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of cidr_blocks of redshift subnets
        """
        return pulumi.get(self, "redshift_subnets_cidr_blocks")

    @property
    @pulumi.getter
    def redshift_subnets_ipv6_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of IPv6 cidr_blocks of redshift subnets in an IPv6 enabled VPC
        """
        return pulumi.get(self, "redshift_subnets_ipv6_cidr_blocks")

    @property
    @pulumi.getter
    def this_customer_gateway(self) -> pulumi.Output[Optional[str]]:
        """
        Map of Customer Gateway attributes
        """
        return pulumi.get(self, "this_customer_gateway")

    @property
    @pulumi.getter
    def vgw_arn(self) -> pulumi.Output[Optional[str]]:
        """
        The ARN of the VPN Gateway
        """
        return pulumi.get(self, "vgw_arn")

    @property
    @pulumi.getter
    def vgw_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the VPN Gateway
        """
        return pulumi.get(self, "vgw_id")

    @property
    @pulumi.getter
    def vpc_arn(self) -> pulumi.Output[Optional[str]]:
        """
        The ARN of the VPC
        """
        return pulumi.get(self, "vpc_arn")

    @property
    @pulumi.getter
    def vpc_cidr_block(self) -> pulumi.Output[Optional[str]]:
        """
        The CIDR block of the VPC
        """
        return pulumi.get(self, "vpc_cidr_block")

    @property
    @pulumi.getter
    def vpc_enable_dns_hostnames(self) -> pulumi.Output[Optional[str]]:
        """
        Whether or not the VPC has DNS hostname support
        """
        return pulumi.get(self, "vpc_enable_dns_hostnames")

    @property
    @pulumi.getter
    def vpc_enable_dns_support(self) -> pulumi.Output[Optional[str]]:
        """
        Whether or not the VPC has DNS support
        """
        return pulumi.get(self, "vpc_enable_dns_support")

    @property
    @pulumi.getter
    def vpc_flow_log_cloudwatch_iam_role_arn(self) -> pulumi.Output[Optional[str]]:
        """
        The ARN of the IAM role used when pushing logs to Cloudwatch log group
        """
        return pulumi.get(self, "vpc_flow_log_cloudwatch_iam_role_arn")

    @property
    @pulumi.getter
    def vpc_flow_log_deliver_cross_account_role(self) -> pulumi.Output[Optional[str]]:
        """
        The ARN of the IAM role used when pushing logs cross account
        """
        return pulumi.get(self, "vpc_flow_log_deliver_cross_account_role")

    @property
    @pulumi.getter
    def vpc_flow_log_destination_arn(self) -> pulumi.Output[Optional[str]]:
        """
        The ARN of the destination for VPC Flow Logs
        """
        return pulumi.get(self, "vpc_flow_log_destination_arn")

    @property
    @pulumi.getter
    def vpc_flow_log_destination_type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of the destination for VPC Flow Logs
        """
        return pulumi.get(self, "vpc_flow_log_destination_type")

    @property
    @pulumi.getter
    def vpc_flow_log_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the Flow Log resource
        """
        return pulumi.get(self, "vpc_flow_log_id")

    @property
    @pulumi.getter
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the VPC
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vpc_instance_tenancy(self) -> pulumi.Output[Optional[str]]:
        """
        Tenancy of instances spin up within VPC
        """
        return pulumi.get(self, "vpc_instance_tenancy")

    @property
    @pulumi.getter
    def vpc_ipv6_association_id(self) -> pulumi.Output[Optional[str]]:
        """
        The association ID for the IPv6 CIDR block
        """
        return pulumi.get(self, "vpc_ipv6_association_id")

    @property
    @pulumi.getter
    def vpc_ipv6_cidr_block(self) -> pulumi.Output[Optional[str]]:
        """
        The IPv6 CIDR block
        """
        return pulumi.get(self, "vpc_ipv6_cidr_block")

    @property
    @pulumi.getter
    def vpc_main_route_table_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the main route table associated with this VPC
        """
        return pulumi.get(self, "vpc_main_route_table_id")

    @property
    @pulumi.getter
    def vpc_owner_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the AWS account that owns the VPC
        """
        return pulumi.get(self, "vpc_owner_id")

    @property
    @pulumi.getter
    def vpc_secondary_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of secondary CIDR blocks of the VPC
        """
        return pulumi.get(self, "vpc_secondary_cidr_blocks")

