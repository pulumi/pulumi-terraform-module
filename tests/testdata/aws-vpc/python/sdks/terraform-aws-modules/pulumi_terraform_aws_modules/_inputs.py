# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'FlowLogCloudwatchIamRoleConditionsArgs',
    'FlowLogCloudwatchIamRoleConditionsArgsDict',
]

MYPY = False

if not MYPY:
    class FlowLogCloudwatchIamRoleConditionsArgsDict(TypedDict):
        test: NotRequired[pulumi.Input[str]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        variable: NotRequired[pulumi.Input[str]]
elif False:
    FlowLogCloudwatchIamRoleConditionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FlowLogCloudwatchIamRoleConditionsArgs:
    def __init__(__self__, *,
                 test: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variable: Optional[pulumi.Input[str]] = None):
        if test is not None:
            pulumi.set(__self__, "test", test)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def test(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "test")

    @test.setter
    def test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


