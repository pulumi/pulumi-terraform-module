package tests

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"

	"github.com/hexops/autogold/v2"
	"github.com/pulumi/providertest/pulumitest"
	"github.com/pulumi/providertest/pulumitest/opttest"
	"github.com/pulumi/pulumi/sdk/v3/go/auto/optpreview"
	"github.com/pulumi/pulumi/sdk/v3/go/auto/optup"
	"github.com/stretchr/testify/require"
)

// testdata/randmod is a fully local module written for test purposes that uses resources from the
// random provider without cloud access, making it especially suitable for testing. Generate a
// TypeScript SDK and go through some updates to test the integration end to end.
func Test_RandMod_TypeScript(t *testing.T) {
	localProviderBinPath := ensureCompiledProvider(t)

	// Module written to support the test.
	randMod, err := filepath.Abs(filepath.Join("testdata", "modules", "randmod"))
	require.NoError(t, err)

	// Program written to support the test.
	randModProg := filepath.Join("testdata", "programs", "ts", "randmod-program")

	moduleProvider := "terraform-module-provider"
	localPath := opttest.LocalProviderPath(moduleProvider, filepath.Dir(localProviderBinPath))
	pt := pulumitest.NewPulumiTest(t, randModProg, localPath)
	pt.CopyToTempDir(t)

	t.Run("pulumi package add <provider> <randmod>", func(t *testing.T) {
		pulumiPackageAdd(t, pt, localProviderBinPath, randMod)
	})

	t.Run("pulumi preview", func(t *testing.T) {
		var preview bytes.Buffer
		pt.Preview(t,
			optpreview.Diff(),
			optpreview.ErrorProgressStreams(os.Stderr),
			optpreview.ProgressStreams(&preview),
		)
		autogold.Expect(&bytes.Buffer{buf: []uint8{
			80,
			114,
			101,
			118,
			105,
			101,
			119,
			105,
			110,
			103,
			32,
			117,
			112,
			100,
			97,
			116,
			101,
			32,
			40,
			116,
			101,
			115,
			116,
			41,
			58,
			10,
			43,
			32,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			83,
			116,
			97,
			99,
			107,
			58,
			32,
			40,
			99,
			114,
			101,
			97,
			116,
			101,
			41,
			10,
			32,
			32,
			32,
			32,
			91,
			117,
			114,
			110,
			61,
			117,
			114,
			110,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			116,
			101,
			115,
			116,
			58,
			58,
			116,
			115,
			45,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			45,
			112,
			114,
			111,
			103,
			114,
			97,
			109,
			58,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			83,
			116,
			97,
			99,
			107,
			58,
			58,
			116,
			115,
			45,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			45,
			112,
			114,
			111,
			103,
			114,
			97,
			109,
			45,
			116,
			101,
			115,
			116,
			93,
			10,
			43,
			32,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			105,
			110,
			100,
			101,
			120,
			58,
			77,
			111,
			100,
			117,
			108,
			101,
			58,
			32,
			40,
			99,
			114,
			101,
			97,
			116,
			101,
			41,
			10,
			32,
			32,
			32,
			32,
			91,
			117,
			114,
			110,
			61,
			117,
			114,
			110,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			116,
			101,
			115,
			116,
			58,
			58,
			116,
			115,
			45,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			45,
			112,
			114,
			111,
			103,
			114,
			97,
			109,
			58,
			58,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			105,
			110,
			100,
			101,
			120,
			58,
			77,
			111,
			100,
			117,
			108,
			101,
			58,
			58,
			109,
			121,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			93,
			10,
			32,
			32,
			32,
			32,
			43,
			32,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			105,
			110,
			100,
			101,
			120,
			58,
			77,
			111,
			100,
			117,
			108,
			101,
			83,
			116,
			97,
			116,
			101,
			58,
			32,
			40,
			99,
			114,
			101,
			97,
			116,
			101,
			41,
			10,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			91,
			117,
			114,
			110,
			61,
			117,
			114,
			110,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			116,
			101,
			115,
			116,
			58,
			58,
			116,
			115,
			45,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			45,
			112,
			114,
			111,
			103,
			114,
			97,
			109,
			58,
			58,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			105,
			110,
			100,
			101,
			120,
			58,
			77,
			111,
			100,
			117,
			108,
			101,
			36,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			105,
			110,
			100,
			101,
			120,
			58,
			77,
			111,
			100,
			117,
			108,
			101,
			83,
			116,
			97,
			116,
			101,
			58,
			58,
			109,
			111,
			100,
			117,
			108,
			101,
			83,
			116,
			97,
			116,
			101,
			93,
			10,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			91,
			112,
			114,
			111,
			118,
			105,
			100,
			101,
			114,
			61,
			117,
			114,
			110,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			116,
			101,
			115,
			116,
			58,
			58,
			116,
			115,
			45,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			45,
			112,
			114,
			111,
			103,
			114,
			97,
			109,
			58,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			112,
			114,
			111,
			118,
			105,
			100,
			101,
			114,
			115,
			58,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			58,
			100,
			101,
			102,
			97,
			117,
			108,
			116,
			95,
			48,
			95,
			48,
			95,
			49,
			58,
			58,
			48,
			52,
			100,
			97,
			54,
			98,
			53,
			52,
			45,
			56,
			48,
			101,
			52,
			45,
			52,
			54,
			102,
			55,
			45,
			57,
			54,
			101,
			99,
			45,
			98,
			53,
			54,
			102,
			102,
			48,
			51,
			51,
			49,
			98,
			97,
			57,
			93,
			10,
			32,
			32,
			32,
			32,
			43,
			32,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			116,
			102,
			58,
			114,
			97,
			110,
			100,
			111,
			109,
			95,
			105,
			110,
			116,
			101,
			103,
			101,
			114,
			58,
			32,
			40,
			99,
			114,
			101,
			97,
			116,
			101,
			41,
			10,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			91,
			117,
			114,
			110,
			61,
			117,
			114,
			110,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			116,
			101,
			115,
			116,
			58,
			58,
			116,
			115,
			45,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			45,
			112,
			114,
			111,
			103,
			114,
			97,
			109,
			58,
			58,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			105,
			110,
			100,
			101,
			120,
			58,
			77,
			111,
			100,
			117,
			108,
			101,
			36,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			116,
			102,
			58,
			114,
			97,
			110,
			100,
			111,
			109,
			95,
			105,
			110,
			116,
			101,
			103,
			101,
			114,
			58,
			58,
			112,
			114,
			105,
			111,
			114,
			105,
			116,
			121,
			93,
			10,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			91,
			112,
			114,
			111,
			118,
			105,
			100,
			101,
			114,
			61,
			117,
			114,
			110,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			116,
			101,
			115,
			116,
			58,
			58,
			116,
			115,
			45,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			45,
			112,
			114,
			111,
			103,
			114,
			97,
			109,
			58,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			112,
			114,
			111,
			118,
			105,
			100,
			101,
			114,
			115,
			58,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			58,
			100,
			101,
			102,
			97,
			117,
			108,
			116,
			95,
			48,
			95,
			48,
			95,
			49,
			58,
			58,
			48,
			52,
			100,
			97,
			54,
			98,
			53,
			52,
			45,
			56,
			48,
			101,
			52,
			45,
			52,
			54,
			102,
			55,
			45,
			57,
			54,
			101,
			99,
			45,
			98,
			53,
			54,
			102,
			102,
			48,
			51,
			51,
			49,
			98,
			97,
			57,
			93,
			10,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			107,
			101,
			101,
			112,
			101,
			114,
			115,
			32,
			32,
			58,
			32,
			111,
			117,
			116,
			112,
			117,
			116,
			60,
			115,
			116,
			114,
			105,
			110,
			103,
			62,
			10,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			109,
			97,
			120,
			32,
			32,
			32,
			32,
			32,
			32,
			58,
			32,
			49,
			48,
			10,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			109,
			105,
			110,
			32,
			32,
			32,
			32,
			32,
			32,
			58,
			32,
			49,
			10,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			32,
			115,
			101,
			101,
			100,
			32,
			32,
			32,
			32,
			32,
			58,
			32,
			111,
			117,
			116,
			112,
			117,
			116,
			60,
			115,
			116,
			114,
			105,
			110,
			103,
			62,
			10,
			32,
			32,
			32,
			32,
			45,
			45,
			111,
			117,
			116,
			112,
			117,
			116,
			115,
			58,
			45,
			45,
			10,
			32,
			32,
			32,
			32,
			114,
			97,
			110,
			100,
			111,
			109,
			80,
			114,
			105,
			111,
			114,
			105,
			116,
			121,
			58,
			32,
			111,
			117,
			116,
			112,
			117,
			116,
			60,
			115,
			116,
			114,
			105,
			110,
			103,
			62,
			10,
			82,
			101,
			115,
			111,
			117,
			114,
			99,
			101,
			115,
			58,
			10,
			32,
			32,
			32,
			32,
			43,
			32,
			52,
			32,
			116,
			111,
			32,
			99,
			114,
			101,
			97,
			116,
			101,
			10,
		}}).Equal(t, &preview)
	})

	t.Run("pulumi up", func(t *testing.T) {
		var update bytes.Buffer
		pt.Up(t,
			optup.ErrorProgressStreams(os.Stderr),
			optup.ProgressStreams(&update),
		)
		autogold.Expect(&bytes.Buffer{buf: []uint8{
			85,
			112,
			100,
			97,
			116,
			105,
			110,
			103,
			32,
			40,
			116,
			101,
			115,
			116,
			41,
			58,
			10,
			10,
			32,
			43,
			32,
			32,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			83,
			116,
			97,
			99,
			107,
			32,
			116,
			115,
			45,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			45,
			112,
			114,
			111,
			103,
			114,
			97,
			109,
			45,
			116,
			101,
			115,
			116,
			32,
			99,
			114,
			101,
			97,
			116,
			105,
			110,
			103,
			32,
			40,
			48,
			115,
			41,
			32,
			10,
			32,
			43,
			32,
			32,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			105,
			110,
			100,
			101,
			120,
			58,
			77,
			111,
			100,
			117,
			108,
			101,
			32,
			109,
			121,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			32,
			99,
			114,
			101,
			97,
			116,
			105,
			110,
			103,
			32,
			40,
			48,
			115,
			41,
			32,
			10,
			32,
			43,
			32,
			32,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			105,
			110,
			100,
			101,
			120,
			58,
			77,
			111,
			100,
			117,
			108,
			101,
			83,
			116,
			97,
			116,
			101,
			32,
			109,
			111,
			100,
			117,
			108,
			101,
			83,
			116,
			97,
			116,
			101,
			32,
			99,
			114,
			101,
			97,
			116,
			105,
			110,
			103,
			32,
			40,
			48,
			115,
			41,
			32,
			10,
			64,
			32,
			117,
			112,
			100,
			97,
			116,
			105,
			110,
			103,
			46,
			46,
			46,
			46,
			46,
			10,
			32,
			43,
			32,
			32,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			58,
			105,
			110,
			100,
			101,
			120,
			58,
			77,
			111,
			100,
			117,
			108,
			101,
			83,
			116,
			97,
			116,
			101,
			32,
			109,
			111,
			100,
			117,
			108,
			101,
			83,
			116,
			97,
			116,
			101,
			32,
			99,
			114,
			101,
			97,
			116,
			101,
			100,
			32,
			40,
			49,
			115,
			41,
			32,
			10,
			32,
			43,
			32,
			32,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			83,
			116,
			97,
			99,
			107,
			32,
			116,
			115,
			45,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			45,
			112,
			114,
			111,
			103,
			114,
			97,
			109,
			45,
			116,
			101,
			115,
			116,
			32,
			99,
			114,
			101,
			97,
			116,
			105,
			110,
			103,
			32,
			40,
			49,
			115,
			41,
			32,
			119,
			97,
			114,
			110,
			105,
			110,
			103,
			58,
			32,
			85,
			110,
			100,
			101,
			102,
			105,
			110,
			101,
			100,
			32,
			118,
			97,
			108,
			117,
			101,
			32,
			40,
			114,
			97,
			110,
			100,
			111,
			109,
			80,
			114,
			105,
			111,
			114,
			105,
			116,
			121,
			41,
			32,
			119,
			105,
			108,
			108,
			32,
			110,
			111,
			116,
			32,
			115,
			104,
			111,
			119,
			32,
			97,
			115,
			32,
			97,
			32,
			115,
			116,
			97,
			99,
			107,
			32,
			111,
			117,
			116,
			112,
			117,
			116,
			46,
			10,
			32,
			43,
			32,
			32,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			83,
			116,
			97,
			99,
			107,
			32,
			116,
			115,
			45,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			45,
			112,
			114,
			111,
			103,
			114,
			97,
			109,
			45,
			116,
			101,
			115,
			116,
			32,
			99,
			114,
			101,
			97,
			116,
			101,
			100,
			32,
			40,
			49,
			115,
			41,
			32,
			49,
			32,
			119,
			97,
			114,
			110,
			105,
			110,
			103,
			10,
			68,
			105,
			97,
			103,
			110,
			111,
			115,
			116,
			105,
			99,
			115,
			58,
			10,
			32,
			32,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			112,
			117,
			108,
			117,
			109,
			105,
			58,
			83,
			116,
			97,
			99,
			107,
			32,
			40,
			116,
			115,
			45,
			114,
			97,
			110,
			100,
			109,
			111,
			100,
			45,
			112,
			114,
			111,
			103,
			114,
			97,
			109,
			45,
			116,
			101,
			115,
			116,
			41,
			58,
			10,
			32,
			32,
			32,
			32,
			119,
			97,
			114,
			110,
			105,
			110,
			103,
			58,
			32,
			85,
			110,
			100,
			101,
			102,
			105,
			110,
			101,
			100,
			32,
			118,
			97,
			108,
			117,
			101,
			32,
			40,
			114,
			97,
			110,
			100,
			111,
			109,
			80,
			114,
			105,
			111,
			114,
			105,
			116,
			121,
			41,
			32,
			119,
			105,
			108,
			108,
			32,
			110,
			111,
			116,
			32,
			115,
			104,
			111,
			119,
			32,
			97,
			115,
			32,
			97,
			32,
			115,
			116,
			97,
			99,
			107,
			32,
			111,
			117,
			116,
			112,
			117,
			116,
			46,
			10,
			10,
			82,
			101,
			115,
			111,
			117,
			114,
			99,
			101,
			115,
			58,
			10,
			32,
			32,
			32,
			32,
			43,
			32,
			51,
			32,
			99,
			114,
			101,
			97,
			116,
			101,
			100,
			10,
			10,
			68,
			117,
			114,
			97,
			116,
			105,
			111,
			110,
			58,
			32,
			51,
			115,
			10,
			10,
		}}).Equal(t, &update)
	})
}

func TestGenerateTerraformAwsModulesSDKs(t *testing.T) {
	localProviderBinPath := ensureCompiledProvider(t)

	example := filepath.Join("testdata", "aws-vpc")

	dest := func(folder string) string {
		d, err := filepath.Abs(filepath.Join(example, folder))
		require.NoError(t, err)
		err = os.RemoveAll(d)
		require.NoError(t, err)
		return d
	}

	// --generate-only=true means skip installing deps
	generateOnly := true

	t.Run("typescript", func(t *testing.T) {
		pulumiConvert(t, localProviderBinPath, example, dest("node"), "typescript", generateOnly)
	})

	t.Run("python", func(t *testing.T) {
		d := dest("python")
		t.Skip("TODO[pulumi/pulumi-terraform-module-provider#76] auto-installing global Python deps makes this fail")
		pulumiConvert(t, localProviderBinPath, example, d, "python", generateOnly)
	})

	t.Run("dotnet", func(t *testing.T) {
		d := dest("dotnet")
		t.Skip("TODO[pulumi/pulumi-terraform-module-provider#77] the generated project is missing the SDK and is not buildable")
		pulumiConvert(t, localProviderBinPath, example, d, "dotnet", generateOnly)
	})

	t.Run("go", func(t *testing.T) {
		d := dest("go")
		t.Skip("TODO[pulumi/pulumi-terraform-module-provider#78] pulumi convert fails when generating a Go SDK")
		pulumiConvert(t, localProviderBinPath, example, d, "go", generateOnly)
	})

	t.Run("java", func(t *testing.T) {
		d := dest("java")
		// Note that pulumi convert prints instructions how to make the result compile.
		// They are not yet entirely accurate, and we do not yet attemt to compile the result.
		pulumiConvert(t, localProviderBinPath, example, d, "java", generateOnly)
	})
}

func TestTerraformAwsModulesVpcIntoTypeScript(t *testing.T) {
	localProviderBinPath := ensureCompiledProvider(t)
	testDir := t.TempDir()

	t.Run("convert to typescript", func(t *testing.T) {
		pulumiConvert(t, localProviderBinPath,
			filepath.Join("testdata", "aws-vpc"),
			testDir,
			"typescript",
			false) // --generate-only=false means do not skip installing deps
	})

	pt := pulumitest.NewPulumiTest(t, testDir,
		opttest.LocalProviderPath("terraform-module-provider", filepath.Dir(localProviderBinPath)),
		opttest.SkipInstall())
	pt.CopyToTempDir(t)

	t.Run("pulumi preview", func(t *testing.T) {
		skipLocalRunsWithoutCreds(t)

		pt.Preview(t,
			optpreview.Diff(),
			optpreview.ErrorProgressStreams(os.Stderr),
			optpreview.ProgressStreams(os.Stdout),
		)
	})

	t.Run("pulumi up", func(t *testing.T) {
		skipLocalRunsWithoutCreds(t)

		res := pt.Up(t,
			optup.ErrorProgressStreams(os.Stderr),
			optup.ProgressStreams(os.Stdout),
		)

		// TODO: this is not quite correct, since the children are not included in the summary
		require.Equal(t, res.Summary.ResourceChanges, &map[string]int{"create": 3})

		stack := pt.ExportStack(t)
		t.Logf("deployment: %s", stack.Deployment)

		stackJSON, err := stack.Deployment.MarshalJSON()
		require.NoError(t, err)

		deployment := map[string]any{}
		require.NoError(t, json.Unmarshal(stackJSON, &deployment))

		resources := deployment["resources"].([]any)
		require.Equal(t, len(resources), 4)
		stateResource := resources[3].(map[string]any)
		stateResourceOutputs := stateResource["outputs"].(map[string]any)
		tfState := stateResourceOutputs["state"].(string)

		require.Less(t, 10, len(tfState))
		require.Contains(t, tfState, "vpc_id")
	})
}

func getRoot(t *testing.T) string {
	wd, err := os.Getwd()
	require.NoError(t, err)
	root, err := filepath.Abs(filepath.Join(wd, ".."))
	require.NoError(t, err)
	return root
}

func ensureCompiledProvider(t *testing.T) string {
	root := getRoot(t)
	binPath := filepath.Join(root, "bin", "pulumi-resource-terraform-module-provider")
	cmd := exec.Command("go", "build",
		"-o", "bin/pulumi-resource-terraform-module-provider",
		"./cmd/pulumi-resource-terraform-module-provider")
	cmd.Dir = root
	out, err := cmd.CombinedOutput()
	if err != nil {
		require.NoError(t, fmt.Errorf("failed to compile provider: %w\n%s", err, out))
	}
	return binPath
}

func dirExists(dir string) bool {
	_, err := os.Stat(dir)
	return !os.IsNotExist(err)
}

func pulumiConvert(t *testing.T, localProviderBinPath, sourceDir, targetDir, language string, generateOnly bool) {
	convertArgs := []string{
		"convert",
		"--strict",
		"--from", "pcl",
		"--language", language,
		"--out", targetDir,
	}
	if generateOnly {
		convertArgs = append(convertArgs, "--generate-only")
	}
	t.Logf("pulumi %s", strings.Join(convertArgs, " "))
	cmd := exec.Command("pulumi", convertArgs...)

	path := os.Getenv("PATH")
	path = fmt.Sprintf("%s:%s", filepath.Dir(localProviderBinPath), path)

	cmd.Dir = sourceDir
	cmd.Env = append(os.Environ(), fmt.Sprintf("PATH=%s", path))
	out, err := cmd.CombinedOutput()
	if err != nil {
		t.Fatalf("failed to run pulumi convert: %v\n%s", err, out)
	}
}

// Skip the test if it is being run locally without cloud credentials being configured.
func skipLocalRunsWithoutCreds(t *testing.T) {
	if _, ci := os.LookupEnv("CI"); ci {
		return // never skip when in CI
	}

	awsConfigured := false
	for _, envVar := range os.Environ() {
		if strings.HasPrefix(strings.ToUpper(envVar), "AWS_ACCESS_KEY_ID") {
			awsConfigured = true
		}
		if strings.HasPrefix(strings.ToUpper(envVar), "AWS_PROFILE") {
			awsConfigured = true
		}
	}
	if !awsConfigured {
		t.Skip("AWS configuration such as AWS_PROFILE env var is required to run this test")
	}
}

func pulumiPackageAdd(
	t *testing.T,
	pt *pulumitest.PulumiTest,
	localProviderBinPath string,
	args ...string,
) {
	ctx := context.Background()
	allArgs := append([]string{"package", "add", localProviderBinPath}, args...)
	stdout, stderr, exitCode, err := pt.CurrentStack().Workspace().PulumiCommand().Run(
		ctx,
		pt.WorkingDir(),
		nil, /* reader */
		nil, /* additionalOutput */
		nil, /* additionalErrorOutput */
		nil, /* additionalEnv */
		allArgs...,
	)
	if err != nil || exitCode != 0 {
		t.Errorf("Failed to run pulumi package add\nExit code: %d\nError: %v\n%s\n%s",
			exitCode, err, stdout, stderr)
	}
	require.NoError(t, err)
	require.Equal(t, 0, exitCode)
}
